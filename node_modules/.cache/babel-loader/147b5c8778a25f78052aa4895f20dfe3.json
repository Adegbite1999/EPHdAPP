{"ast":null,"code":"var _jsxFileName = \"/home/adegbite/stakingDapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport abi from \"./utils/web3/abi.json\";\nimport token from \"./utils/web3/tokenAbi.json\";\nimport { Contract, ethers, utils } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x40960D06132BBCBAA3FfA1B77d10e57C8578eF95\";\nconst tokenAddress = \"0xD0998d596E49F827fDBeb4f40aF29013354969B9\";\n\nfunction App() {\n  _s();\n\n  //a flag to check status of user\n  const [connected, setConnected] = useState(false);\n  const [loading, setLoading] = useState(false);\n  console.log(\"i am loading\", loading);\n  const [stakeInput, setStakeInput] = useState(\"\");\n  const [stakeAmount, setStakeAmount] = useState(null);\n  const [withdrawInput, setWithdrawInput] = useState(\"\");\n  const [stakeHistory, setStakeHistory] = useState([]);\n  const [withdrawHistory, setWithdrawHistory] = useState([]); // const [withdrawAmount, setWithdrawAmount] = useState(null)\n\n  const [reward, setReward] = useState(null);\n  const [userInfo, setUserInfo] = useState({\n    eth_balance: 0,\n    token_balance: 0,\n    address: null\n  }); // console.log(userInfo)\n\n  const getAccountDetails = async address => {\n    setLoading(true);\n\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userEthBal = await provider.getBalance(address);\n      const TokenContractInstance = new Contract(tokenAddress, token, provider);\n      const userBRTBalance = await TokenContractInstance.balanceOf(address);\n      setLoading(false);\n      return {\n        userBRTBalance,\n        userEthBal\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  }; // const getAccountDetails = async(address) => {\n  //   try {\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum)\n  //     const userEthBal = await provider.getBalance(address)\n  //     const BRTContractInstance = await new Contract(contractAddress,abi,provider)\n  //     const userBRTBalance = await BRTContractInstance.balanceOf(address)\n  //     return {userEthBal, userBRTBalance}\n  //   } catch (error) {\n  //     toast.error(error)\n  //   }\n  // }\n  // handler for when user switch from one account to another or completely disconnected\n\n\n  const handleAccountChanged = async accounts => {\n    if (!!accounts.length) {\n      const networkId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n      if (Number(networkId) !== 4) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        eth_balance: accountDetails.userEthBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n    } else {\n      setConnected(false);\n      setUserInfo({\n        eth_balance: 0,\n        token_balance: 0,\n        address: null\n      });\n    }\n  }; // handler for handling chain/network changed\n\n\n  const handleChainChanged = async chainid => {\n    if (Number(chainid) !== 4) {\n      setConnected(false);\n      setUserInfo({\n        eth_balance: 0,\n        token_balance: 0,\n        address: null\n      });\n      return toast.error(\"You are connected to the wrong network, please switch to rinkeby\");\n    } else {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.listAccounts();\n      if (!accounts.length) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        eth_balance: accountDetails.userEthBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n    }\n  }; // const getBal = async() =>{\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //   const signer = provider.getSigner()\n  //   const BRTContractInstance = await new Contract(contractAddress,abi,signer)\n  //   const accounts = await provider.listAccounts();\n  //   const address = await accounts[0]\n  //   const stake = await BRTContractInstance.getBalance()\n  //   console.log(parseInt(Number(stake._hex)))\n  // }\n  // eager connect: an handler to eagerly connec user and fetch their data\n\n\n  const eagerConnect = async () => {\n    const networkId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n    if (Number(networkId) !== 4) return;\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const accounts = await provider.listAccounts();\n    if (!accounts.length) return;\n    const accountDetails = await getAccountDetails(accounts[0]);\n    setUserInfo({\n      eth_balance: accountDetails.userEthBal,\n      token_balance: accountDetails.userBRTBalance,\n      address: accounts[0]\n    });\n    setConnected(true);\n  };\n\n  const error = async () => {\n    const networkId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n    if (Number(networkId) !== 4) toast.error(\"please connect to rinkeby network\");\n  };\n\n  useEffect(() => {\n    init();\n    withdraw(); // getBal()\n\n    if (!window.ethereum) return; // binding handlers to wallet events we care about\n\n    window.ethereum.on(\"connect\", eagerConnect);\n    window.ethereum.on(\"accountsChanged\", handleAccountChanged);\n    window.ethereum.on('chainChanged', handleChainChanged);\n    getStakeAmount();\n    getStakeReward();\n  }, [stakeAmount, loading, reward, connected]);\n\n  const connectWallet = async () => {\n    if (!!!window.ethereum || !!!window.web3) {\n      toast.error('please connect to an ethereum enabled browser');\n      return;\n    }\n\n    const networkId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n\n    if (!!window.ethereum || !!window.web3) {\n      if (Number(networkId) === 4) {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        toast.success(\"wallet connected!\");\n      } else {\n        await error();\n      }\n    }\n  };\n\n  const stakeHandler = async e => {\n    e.preventDefault();\n    if (stakeInput === \"\") toast(\"Input field cannot be empty\");\n    if (stakeInput < 0) toast(\"Yo cannot stake less than 0 BRT\");\n    setLoading(true);\n\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const TokenContractInstance = new Contract(tokenAddress, token, signer);\n      const BRTContractInstance = new Contract(contractAddress, abi, signer);\n      const weiValue = utils.parseEther(stakeInput);\n      await TokenContractInstance.approve(contractAddress, weiValue);\n      await BRTContractInstance.stakeToken(weiValue);\n      const accounts = await provider.listAccounts();\n      if (!accounts.length) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        eth_balance: accountDetails.userEthBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n      toast.success(`You've successfully staked ${weiValue}`);\n      setStakeInput(\"\");\n      setLoading(false);\n    } catch (error) {\n      toast.error(error);\n    }\n  };\n\n  const withdrawHandler = async e => {\n    e.preventDefault();\n    if (withdrawInput === \"\") toast(\"Input field cannot be empty\");\n    if (withdrawInput < 0) toast(\"You cannot withdraw less than 0 BRT\");\n    setLoading(true);\n\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const BRTContractInstance = new Contract(contractAddress, abi, signer);\n      const weiValue = utils.parseEther(withdrawInput);\n      await BRTContractInstance.withdraw(weiValue);\n      const accounts = await provider.listAccounts();\n      if (!accounts.length) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        eth_balance: accountDetails.userEthBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n      toast.success(`You've successfully withdraw ${weiValue}`);\n      setWithdrawInput(\"\");\n      setLoading(false);\n    } catch (error) {\n      toast.error(error);\n      setLoading(false);\n    }\n  }; // getStakeAmount\n\n\n  const getStakeAmount = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const BRTContractInstance = await new Contract(contractAddress, abi, signer);\n    const stake = await BRTContractInstance.getBalance();\n    const formatunit = utils.formatUnits(stake, 18);\n    setStakeAmount(formatunit);\n  };\n\n  const getStakeReward = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const BRTContractInstance = await new Contract(contractAddress, abi, signer);\n    const accounts = await provider.listAccounts();\n    const address = await accounts[0];\n    const stake = await BRTContractInstance.calculateReward(address); // console.log(stake.toString())\n\n    const formatunit = utils.formatUnits(stake, 18);\n    console.log(formatunit);\n    const parseAmount = parseInt(formatunit);\n    setReward(parseAmount);\n  }; // a function for fetching necesary data from the contract and also listening for contract event when the page loads\n\n\n  const init = async () => {\n    const customProvider = new ethers.providers.JsonRpcProvider(process.env.REACT_APP_RPC_URL);\n    const BRTContractInstance = new Contract(contractAddress, abi, customProvider);\n    const stakeHistory = await BRTContractInstance.queryFilter(\"AddStack\");\n    const history = [];\n    stakeHistory.forEach(data => {\n      history.unshift({\n        amount: data.args[1],\n        account: data.args[0],\n        time: data.args[2].toString()\n      });\n    });\n    setStakeHistory(history);\n    BRTContractInstance.on(\"AddStack\", (account, amount, time) => {\n      const newStake = {\n        amount: amount,\n        account: account,\n        time: time.toString\n      };\n      setStakeHistory(prev => [newStake, ...prev]);\n    });\n  };\n\n  const withdraw = async () => {\n    const customProvider = new ethers.providers.JsonRpcProvider(process.env.REACT_APP_RPC_URL);\n    const BRTContractInstance = new Contract(contractAddress, abi, customProvider);\n    const withdrawHistory = await BRTContractInstance.queryFilter(\"Withdrawal\");\n    const history = [];\n    withdrawHistory.forEach(data => {\n      history.unshift({\n        amount: data.args[1],\n        account: data.args[0],\n        time: data.args[2].toString()\n      });\n    });\n    setWithdrawHistory(history);\n    BRTContractInstance.on(\"Withdrawal\", (account, amount, time) => {\n      const newStake = {\n        amount: amount,\n        account: account,\n        time: time.toString\n      };\n      setStakeHistory(prev => [newStake, ...prev]);\n    });\n  }; // inputChange\n\n\n  const onChangeInputHandler = _ref => {\n    let {\n      target\n    } = _ref;\n\n    switch (target.id) {\n      case \"stake\":\n        setStakeInput(target.value);\n        break;\n\n      case \"withdraw\":\n        setWithdrawInput(target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      connectWallet: connectWallet,\n      userInfo: userInfo,\n      connected: connected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(MyStake, {\n        stakeInput: stakeInput,\n        onChangeInputHandler: onChangeInputHandler,\n        stakeAmount: stakeAmount,\n        withdrawInput: withdrawInput,\n        withdrawHandler: withdrawHandler,\n        stakeHandler: stakeHandler,\n        reward: reward\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StakeHistory, {\n        stakeHistory: stakeHistory,\n        withdrawHistory: withdrawHistory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 338,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/TfbaXsv9hCzKAgLWZWM+Bsxpz8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adegbite/stakingDapp/src/App.js"],"names":["useEffect","useState","Header","MyStake","StakeHistory","Footer","ToastContainer","toast","abi","token","Contract","ethers","utils","contractAddress","tokenAddress","App","connected","setConnected","loading","setLoading","console","log","stakeInput","setStakeInput","stakeAmount","setStakeAmount","withdrawInput","setWithdrawInput","stakeHistory","setStakeHistory","withdrawHistory","setWithdrawHistory","reward","setReward","userInfo","setUserInfo","eth_balance","token_balance","address","getAccountDetails","provider","providers","Web3Provider","window","ethereum","userEthBal","getBalance","TokenContractInstance","userBRTBalance","balanceOf","err","handleAccountChanged","accounts","length","networkId","request","method","Number","accountDetails","handleChainChanged","chainid","error","listAccounts","eagerConnect","init","withdraw","on","getStakeAmount","getStakeReward","connectWallet","web3","success","stakeHandler","e","preventDefault","signer","getSigner","BRTContractInstance","weiValue","parseEther","approve","stakeToken","withdrawHandler","stake","formatunit","formatUnits","calculateReward","parseAmount","parseInt","customProvider","JsonRpcProvider","process","env","REACT_APP_RPC_URL","queryFilter","history","forEach","data","unshift","amount","args","account","time","toString","newStake","prev","onChangeInputHandler","target","id","value"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport abi from \"./utils/web3/abi.json\";\nimport token from \"./utils/web3/tokenAbi.json\";\nimport { Contract, ethers,utils } from 'ethers';\nconst contractAddress = \"0x40960D06132BBCBAA3FfA1B77d10e57C8578eF95\";\nconst tokenAddress = \"0xD0998d596E49F827fDBeb4f40aF29013354969B9\";\n\n\n\n\n\n\nfunction App() {\n  //a flag to check status of user\n  const [connected, setConnected] = useState(false) \n  const [loading, setLoading] = useState(false)\n  console.log(\"i am loading\", loading)\n  const [stakeInput, setStakeInput] = useState(\"\")\n  const [stakeAmount, setStakeAmount] = useState(null)\n  const [withdrawInput, setWithdrawInput] = useState(\"\")\n  const [stakeHistory, setStakeHistory] = useState([])\n  const [withdrawHistory, setWithdrawHistory] = useState([])\n  // const [withdrawAmount, setWithdrawAmount] = useState(null)\n  const [reward, setReward] = useState(null)\n\n  const [userInfo, setUserInfo] = useState({\n    eth_balance: 0,\n    token_balance:0,\n    address: null\n  })\n\n// console.log(userInfo)\nconst getAccountDetails = async (address) => {\n  setLoading(true)\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const userEthBal = await provider.getBalance(address);\n    const TokenContractInstance = new Contract(tokenAddress, token, provider);\n    const userBRTBalance = await TokenContractInstance.balanceOf(address)\n    setLoading(false)\n    return {userBRTBalance, userEthBal}\n  }catch(err) {\n    console.log(err)\n  }\n}\n  // const getAccountDetails = async(address) => {\n  //   try {\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum)\n  //     const userEthBal = await provider.getBalance(address)\n  //     const BRTContractInstance = await new Contract(contractAddress,abi,provider)\n  //     const userBRTBalance = await BRTContractInstance.balanceOf(address)\n  //     return {userEthBal, userBRTBalance}\n  //   } catch (error) {\n  //     toast.error(error)\n  //   }\n  // }\n  \n    // handler for when user switch from one account to another or completely disconnected\n    const handleAccountChanged = async (accounts) => {\n      if(!!accounts.length) {\n        const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n        if(Number(networkId) !== 4) return\n        const accountDetails = await getAccountDetails(accounts[0])\n  \n        setUserInfo({\n          eth_balance: accountDetails.userEthBal,\n          token_balance: accountDetails.userBRTBalance,\n          address: accounts[0]\n        })\n        setConnected(true)\n      }else {\n        setConnected(false)\n        setUserInfo({\n          eth_balance: 0,\n          token_balance: 0,\n          address: null\n        })\n        \n      }\n    }\n\n      // handler for handling chain/network changed\n  const handleChainChanged = async (chainid) => {\n    if(Number(chainid) !== 4) {\n      setConnected(false)\n      setUserInfo({\n        eth_balance: 0,\n        token_balance: 0,\n        address: null\n      })\n      \n    return  toast.error(\"You are connected to the wrong network, please switch to rinkeby\")\n    }else {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.listAccounts();\n      if(!accounts.length) return\n      const accountDetails = await getAccountDetails(accounts[0])\n        setUserInfo({\n          eth_balance: accountDetails.userEthBal,\n          token_balance: accountDetails.userBRTBalance,\n          address: accounts[0]\n        })\n        setConnected(true)\n      }\n  }\n// const getBal = async() =>{\n//   const provider = new ethers.providers.Web3Provider(window.ethereum);\n//   const signer = provider.getSigner()\n//   const BRTContractInstance = await new Contract(contractAddress,abi,signer)\n//   const accounts = await provider.listAccounts();\n//   const address = await accounts[0]\n//   const stake = await BRTContractInstance.getBalance()\n//   console.log(parseInt(Number(stake._hex)))\n// }\n\n// eager connect: an handler to eagerly connec user and fetch their data\n\nconst eagerConnect = async () =>{\n  const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n  if(Number(networkId) !== 4) return;\n  const provider = new ethers.providers.Web3Provider(window.ethereum)\n  const accounts = await provider.listAccounts();\n  if(!accounts.length)return;\n  const accountDetails = await getAccountDetails(accounts[0])\n  setUserInfo({\n    eth_balance:accountDetails.userEthBal,\n    token_balance:accountDetails.userBRTBalance,\n    address: accounts[0]\n  })\nsetConnected(true)\n}\nconst error = async() => {\nconst networkId = await window.ethereum.request({method:\"eth_chainId\"})\nif(Number(networkId) !== 4) toast.error(\"please connect to rinkeby network\")\n}\n\nuseEffect(() => {\n  init()\n  withdraw()\n  // getBal()\n  if(!window.ethereum) return;\n  // binding handlers to wallet events we care about\n  window.ethereum.on(\"connect\", eagerConnect)\n  window.ethereum.on(\"accountsChanged\", handleAccountChanged)\n  window.ethereum.on('chainChanged', handleChainChanged);\n  getStakeAmount()\n  getStakeReward()\n},\n\n[stakeAmount,loading,reward,connected])\n\n\nconst connectWallet = async() =>{\n  if (!!!window.ethereum || !!!window.web3){\n    toast.error('please connect to an ethereum enabled browser')\n    return;\n  }\n  const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n  if (!!window.ethereum || !!window.web3) {\n    if((Number(networkId) === 4)){\n     await window.ethereum.request({ method: 'eth_requestAccounts' }); \n      toast.success(\"wallet connected!\")\n   }else{\n await error()\n   }\n  }\n}\n\nconst stakeHandler = async(e) =>{\n    e.preventDefault()\n    if(stakeInput ===\"\") toast(\"Input field cannot be empty\")\n    if(stakeInput < 0) toast(\"Yo cannot stake less than 0 BRT\")\n    setLoading(true)\n   try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer =provider.getSigner()\n    const TokenContractInstance = new Contract(tokenAddress,token,signer)\n    const BRTContractInstance = new Contract(contractAddress,abi,signer)\n    const weiValue = utils.parseEther(stakeInput)\n    await TokenContractInstance.approve(contractAddress,weiValue)\n    await BRTContractInstance.stakeToken(weiValue)\n\n    const accounts = await provider.listAccounts();\n    if(!accounts.length) return\n    const accountDetails = await getAccountDetails(accounts[0])\n      setUserInfo({\n        eth_balance: accountDetails.userEthBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      })\n      setConnected(true)\n      toast.success(`You've successfully staked ${weiValue}` )\n      setStakeInput(\"\")\n      setLoading(false)\n   } catch (error) {\n     toast.error(error)\n   }\n}\n\nconst withdrawHandler = async(e) =>{\n  e.preventDefault()\n  if(withdrawInput ===\"\") toast(\"Input field cannot be empty\")\n  if(withdrawInput < 0) toast(\"You cannot withdraw less than 0 BRT\")\n  setLoading(true)\n try {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer =provider.getSigner()\n  const BRTContractInstance = new Contract(contractAddress,abi,signer)\n  const weiValue = utils.parseEther(withdrawInput)\n  await BRTContractInstance.withdraw(weiValue)\n\n  const accounts = await provider.listAccounts();\n  if(!accounts.length) return\n  const accountDetails = await getAccountDetails(accounts[0])\n    setUserInfo({\n      eth_balance: accountDetails.userEthBal,\n      token_balance: accountDetails.userBRTBalance,\n      address: accounts[0]\n    })\n    setConnected(true)\n    toast.success(`You've successfully withdraw ${weiValue}` )\n    setWithdrawInput(\"\")\n    setLoading(false)\n } catch (error) {\n   toast.error(error)\n   setLoading(false)\n }\n}\n\n// getStakeAmount\n  const getStakeAmount  = async( ) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner()\n    const BRTContractInstance = await new Contract(contractAddress,abi,signer)\n    const stake = await BRTContractInstance.getBalance()\n    const formatunit = utils.formatUnits(stake,18)\n    setStakeAmount(formatunit)\n  }\n\n  const getStakeReward  = async( ) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner()\n    const BRTContractInstance = await new Contract(contractAddress,abi,signer)\n    const accounts = await provider.listAccounts();\n    const address = await accounts[0]\n    const stake = await BRTContractInstance.calculateReward(address)\n    // console.log(stake.toString())\n    const formatunit = utils.formatUnits(stake,18)\n    console.log(formatunit)\n    const parseAmount = parseInt(formatunit)\n    setReward(parseAmount)\n  }\n\n    // a function for fetching necesary data from the contract and also listening for contract event when the page loads\n    const init = async () => {\n      const customProvider = new ethers.providers.JsonRpcProvider(process.env.REACT_APP_RPC_URL)\n      const BRTContractInstance = new Contract(contractAddress, abi, customProvider);\n      const stakeHistory = await BRTContractInstance.queryFilter(\"AddStack\");\n  \n      const history = [];\n      \n      stakeHistory.forEach(data => {\n        history.unshift({\n          amount: data.args[1],\n          account: data.args[0],\n          time: data.args[2].toString(),\n        })\n      })\n  \n  \n      setStakeHistory(history);\n  \n      BRTContractInstance.on(\"AddStack\", (account, amount, time) => {\n        const newStake = {\n          amount: amount,\n          account: account,\n          time: time.toString\n        }\n  \n        setStakeHistory(prev => [newStake, ...prev]);\n      })\n  \n    }\n\n    const withdraw = async () => {\n      const customProvider = new ethers.providers.JsonRpcProvider(process.env.REACT_APP_RPC_URL)\n      const BRTContractInstance = new Contract(contractAddress, abi, customProvider);\n      const withdrawHistory = await BRTContractInstance.queryFilter(\"Withdrawal\");\n  \n      const history = [];\n      \n      withdrawHistory.forEach(data => {\n        history.unshift({\n          amount: data.args[1],\n          account: data.args[0],\n          time: data.args[2].toString(),\n        })\n      })\n  \n  \n      setWithdrawHistory(history);\n  \n      BRTContractInstance.on(\"Withdrawal\", (account, amount, time) => {\n        const newStake = {\n          amount: amount,\n          account: account,\n          time: time.toString\n        }\n  \n        setStakeHistory(prev => [newStake, ...prev]);\n      })\n  \n    }\n\n// inputChange\nconst onChangeInputHandler = ({target}) =>{\n  switch (target.id) {\n    case \"stake\":\n      setStakeInput(target.value)\n      break;\n      case \"withdraw\":\n        setWithdrawInput(target.value)\n        break;\n    default:\n      break;\n  }\n} \n\n\n  return (\n    <div className=\"App\">\n      <ToastContainer/>\n      <Header \n      connectWallet={connectWallet}\n      userInfo={userInfo}\n      connected={connected}\n      />\n      <main className='main'>\n        <MyStake\n        stakeInput={stakeInput}\n        onChangeInputHandler={onChangeInputHandler}\n        stakeAmount={stakeAmount}\n        withdrawInput={withdrawInput}\n        withdrawHandler={withdrawHandler}\n        stakeHandler={stakeHandler}\n        reward={reward}\n\n        />\n        <StakeHistory\n        stakeHistory={stakeHistory}\n        withdrawHistory={withdrawHistory}\n        />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}