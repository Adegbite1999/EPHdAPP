{"ast":null,"code":"var _jsxFileName = \"/home/adegbite/stakingDapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport abi from \"./utils/web3/abi.json\";\nimport { Contract, ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x40960D06132BBCBAA3FfA1B77d10e57C8578eF95\";\n\nfunction App() {\n  _s();\n\n  //a flag to check status of user\n  const [connected, setConnected] = useState(false);\n  console.log(connected); // user details i.e ETH balance && brt balance && address\n\n  const [userInfo, setUserInfo] = useState({\n    eth_balance: 0,\n    token_balance: 0,\n    address: null\n  }); // console.log(userInfo)\n\n  const getAccountDetails = async address => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userEthBal = await provider.getBalance(address);\n      const BRTContractInstance = await new Contract(contractAddress, abi, provider);\n      const userBRTBalance = await BRTContractInstance.balanceOf(address);\n      return {\n        userEthBal,\n        userBRTBalance\n      };\n    } catch (error) {\n      toast.error(error);\n    }\n  }; // handler for when user switch from one account to another or completely disconnected\n\n\n  const handleAccountChanged = async accounts => {\n    if (!!accounts.length) {\n      const networkId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n      if (Number(networkId) !== 0x4) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        eth_balance: accountDetails.userEthBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n    } else {\n      setConnected(false);\n      setUserInfo({\n        eth_balance: 0,\n        token_balance: 0,\n        address: null\n      });\n    }\n  }; // handler for handling chain/network changed\n\n\n  const handleChainChanged = async chainid => {\n    if (Number(chainid) !== 0x4) {\n      setConnected(false);\n      setUserInfo({\n        eth_balance: 0,\n        token_balance: 0,\n        address: null\n      });\n      return toast.error(\"You are connected to the wrong network, please switch to rinkeby\");\n    } else {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.listAccounts();\n      if (!accounts.length) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        eth_balance: accountDetails.userMaticBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n    }\n  }; // eager connect: an handler to eagerly connec user and fetch their data\n\n\n  const eagerConnect = async () => {\n    const networkId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n    if (Number(networkId) !== 0x4) return;\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const accounts = await provider.listAccounts();\n    if (!accounts.length) return;\n    const accountDetails = await getAccountDetails(accounts[0]); // setUserInfo({\n    //   eth_balance:accountDetails.userEthBal,\n    //   token_balance:accountDetails.userBRTBalance,\n    //   address: accounts[0]\n    // })\n\n    setConnected(true);\n  };\n\n  useEffect(() => {\n    if (!window.ethereum) return; // binding handlers to wallet events we care about\n\n    window.ethereum.on(\"connect\", eagerConnect);\n    window.ethereum.on(\"accountsChanged\", handleAccountChanged);\n    window.ethereum.on('chainChanged', handleChainChanged);\n  }, // eslint-disable-next-line\n  []);\n\n  const connectWallet = async () => {\n    if (!!window.ethereum || !!window.web3) {\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      toast.success(\"wallet connected!\");\n    } else {\n      toast.dark(\"use an ethereum enabled\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      connectWallet: connectWallet,\n      userInfo: userInfo,\n      connected: connected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(MyStake, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StakeHistory, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1HgKTm3IWJH+LfoX5aLlgBVu+44=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adegbite/stakingDapp/src/App.js"],"names":["useEffect","useState","Header","MyStake","StakeHistory","Footer","ToastContainer","toast","abi","Contract","ethers","contractAddress","App","connected","setConnected","console","log","userInfo","setUserInfo","eth_balance","token_balance","address","getAccountDetails","provider","providers","Web3Provider","window","ethereum","userEthBal","getBalance","BRTContractInstance","userBRTBalance","balanceOf","error","handleAccountChanged","accounts","length","networkId","request","method","Number","accountDetails","handleChainChanged","chainid","listAccounts","userMaticBal","eagerConnect","on","connectWallet","web3","success","dark"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,QAAjC;;AACA,MAAMC,eAAe,GAAG,4CAAxB;;AAOA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AAEFc,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ,EAJe,CAKb;;AAEA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC;AACvCkB,IAAAA,WAAW,EAAE,CAD0B;AAEvCC,IAAAA,aAAa,EAAC,CAFyB;AAGvCC,IAAAA,OAAO,EAAE;AAH8B,GAAD,CAAxC,CAPa,CAaf;;AACE,QAAMC,iBAAiB,GAAG,MAAMD,OAAN,IAAkB;AAC1C,QAAI;AACF,YAAME,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMC,UAAU,GAAG,MAAML,QAAQ,CAACM,UAAT,CAAoBR,OAApB,CAAzB;AACA,YAAMS,mBAAmB,GAAG,MAAM,IAAIrB,QAAJ,CAAaE,eAAb,EAA6BH,GAA7B,EAAiCe,QAAjC,CAAlC;AACA,YAAMQ,cAAc,GAAG,MAAMD,mBAAmB,CAACE,SAApB,CAA8BX,OAA9B,CAA7B;AACA,aAAO;AAACO,QAAAA,UAAD;AAAaG,QAAAA;AAAb,OAAP;AACD,KAND,CAME,OAAOE,KAAP,EAAc;AACd1B,MAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAZ;AACD;AACF,GAVD,CAda,CA0BX;;;AACA,QAAMC,oBAAoB,GAAG,MAAOC,QAAP,IAAoB;AAC/C,QAAG,CAAC,CAACA,QAAQ,CAACC,MAAd,EAAsB;AACpB,YAAMC,SAAS,GAAG,MAAMX,MAAM,CAACC,QAAP,CAAgBW,OAAhB,CAAwB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAxB,CAAxB;AACA,UAAGC,MAAM,CAACH,SAAD,CAAN,KAAsB,GAAzB,EAA8B;AAC9B,YAAMI,cAAc,GAAG,MAAMnB,iBAAiB,CAACa,QAAQ,CAAC,CAAD,CAAT,CAA9C;AAEAjB,MAAAA,WAAW,CAAC;AACVC,QAAAA,WAAW,EAAEsB,cAAc,CAACb,UADlB;AAEVR,QAAAA,aAAa,EAAEqB,cAAc,CAACV,cAFpB;AAGVV,QAAAA,OAAO,EAAEc,QAAQ,CAAC,CAAD;AAHP,OAAD,CAAX;AAKArB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAXD,MAWM;AACJA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAI,MAAAA,WAAW,CAAC;AACVC,QAAAA,WAAW,EAAE,CADH;AAEVC,QAAAA,aAAa,EAAE,CAFL;AAGVC,QAAAA,OAAO,EAAE;AAHC,OAAD,CAAX;AAMD;AACF,GArBD,CA3BW,CAkDT;;;AACJ,QAAMqB,kBAAkB,GAAG,MAAOC,OAAP,IAAmB;AAC5C,QAAGH,MAAM,CAACG,OAAD,CAAN,KAAoB,GAAvB,EAA4B;AAC1B7B,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAI,MAAAA,WAAW,CAAC;AACVC,QAAAA,WAAW,EAAE,CADH;AAEVC,QAAAA,aAAa,EAAE,CAFL;AAGVC,QAAAA,OAAO,EAAE;AAHC,OAAD,CAAX;AAMF,aAAQd,KAAK,CAAC0B,KAAN,CAAY,kEAAZ,CAAR;AACC,KATD,MASM;AACJ,YAAMV,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMQ,QAAQ,GAAG,MAAMZ,QAAQ,CAACqB,YAAT,EAAvB;AACA,UAAG,CAACT,QAAQ,CAACC,MAAb,EAAqB;AACrB,YAAMK,cAAc,GAAG,MAAMnB,iBAAiB,CAACa,QAAQ,CAAC,CAAD,CAAT,CAA9C;AACEjB,MAAAA,WAAW,CAAC;AACVC,QAAAA,WAAW,EAAEsB,cAAc,CAACI,YADlB;AAEVzB,QAAAA,aAAa,EAAEqB,cAAc,CAACV,cAFpB;AAGVV,QAAAA,OAAO,EAAEc,QAAQ,CAAC,CAAD;AAHP,OAAD,CAAX;AAKArB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACJ,GAtBD,CAnDa,CA4Ef;;;AAEA,QAAMgC,YAAY,GAAG,YAAW;AAC9B,UAAMT,SAAS,GAAG,MAAMX,MAAM,CAACC,QAAP,CAAgBW,OAAhB,CAAwB;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAxB,CAAxB;AACA,QAAGC,MAAM,CAACH,SAAD,CAAN,KAAsB,GAAzB,EAA8B;AAC9B,UAAMd,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,UAAMQ,QAAQ,GAAG,MAAMZ,QAAQ,CAACqB,YAAT,EAAvB;AACA,QAAG,CAACT,QAAQ,CAACC,MAAb,EAAoB;AACpB,UAAMK,cAAc,GAAG,MAAMnB,iBAAiB,CAACa,QAAQ,CAAC,CAAD,CAAT,CAA9C,CAN8B,CAO9B;AACA;AACA;AACA;AACA;;AACFrB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACC,GAbD;;AAeAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAG,CAAC0B,MAAM,CAACC,QAAX,EAAqB,OADP,CAEd;;AACAD,IAAAA,MAAM,CAACC,QAAP,CAAgBoB,EAAhB,CAAmB,SAAnB,EAA8BD,YAA9B;AACApB,IAAAA,MAAM,CAACC,QAAP,CAAgBoB,EAAhB,CAAmB,iBAAnB,EAAsCb,oBAAtC;AACAR,IAAAA,MAAM,CAACC,QAAP,CAAgBoB,EAAhB,CAAmB,cAAnB,EAAmCL,kBAAnC;AACD,GANQ,EAOT;AACA,IARS,CAAT;;AAWA,QAAMM,aAAa,GAAG,YAAU;AAC9B,QAAI,CAAC,CAACtB,MAAM,CAACC,QAAT,IAAqB,CAAC,CAACD,MAAM,CAACuB,IAAlC,EAAwC;AACvC,YAAMvB,MAAM,CAACC,QAAP,CAAgBW,OAAhB,CAAwB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAxB,CAAN;AACAhC,MAAAA,KAAK,CAAC2C,OAAN,CAAc,mBAAd;AACA,KAHD,MAGK;AACH3C,MAAAA,KAAK,CAAC4C,IAAN,CAAW,yBAAX;AACD;AACF,GAPD;;AAaE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AACA,MAAA,aAAa,EAAEH,aADf;AAEA,MAAA,QAAQ,EAAE/B,QAFV;AAGA,MAAA,SAAS,EAAEJ;AAHX;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,8BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAGE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAaE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GAtIQD,G;;KAAAA,G;AAwIT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport abi from \"./utils/web3/abi.json\";\nimport { Contract, ethers } from 'ethers';\nconst contractAddress = \"0x40960D06132BBCBAA3FfA1B77d10e57C8578eF95\";\n\n\n\n\n\n\nfunction App() {\n  //a flag to check status of user\n  const [connected, setConnected] = useState(false)\n\nconsole.log(connected)\n  // user details i.e ETH balance && brt balance && address\n\n  const [userInfo, setUserInfo] = useState({\n    eth_balance: 0,\n    token_balance:0,\n    address: null\n  })\n\n// console.log(userInfo)\n  const getAccountDetails = async(address) => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const userEthBal = await provider.getBalance(address)\n      const BRTContractInstance = await new Contract(contractAddress,abi,provider)\n      const userBRTBalance = await BRTContractInstance.balanceOf(address)\n      return {userEthBal, userBRTBalance}\n    } catch (error) {\n      toast.error(error)\n    }\n  }\n  \n    // handler for when user switch from one account to another or completely disconnected\n    const handleAccountChanged = async (accounts) => {\n      if(!!accounts.length) {\n        const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n        if(Number(networkId) !== 0x4) return\n        const accountDetails = await getAccountDetails(accounts[0])\n  \n        setUserInfo({\n          eth_balance: accountDetails.userEthBal,\n          token_balance: accountDetails.userBRTBalance,\n          address: accounts[0]\n        })\n        setConnected(true)\n      }else {\n        setConnected(false)\n        setUserInfo({\n          eth_balance: 0,\n          token_balance: 0,\n          address: null\n        })\n        \n      }\n    }\n\n      // handler for handling chain/network changed\n  const handleChainChanged = async (chainid) => {\n    if(Number(chainid) !== 0x4) {\n      setConnected(false)\n      setUserInfo({\n        eth_balance: 0,\n        token_balance: 0,\n        address: null\n      })\n      \n    return  toast.error(\"You are connected to the wrong network, please switch to rinkeby\")\n    }else {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.listAccounts();\n      if(!accounts.length) return\n      const accountDetails = await getAccountDetails(accounts[0])\n        setUserInfo({\n          eth_balance: accountDetails.userMaticBal,\n          token_balance: accountDetails.userBRTBalance,\n          address: accounts[0]\n        })\n        setConnected(true)\n      }\n  }\n\n\n// eager connect: an handler to eagerly connec user and fetch their data\n\nconst eagerConnect = async () =>{\n  const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n  if(Number(networkId) !== 0x4) return;\n  const provider = new ethers.providers.Web3Provider(window.ethereum)\n  const accounts = await provider.listAccounts();\n  if(!accounts.length)return;\n  const accountDetails = await getAccountDetails(accounts[0])\n  // setUserInfo({\n  //   eth_balance:accountDetails.userEthBal,\n  //   token_balance:accountDetails.userBRTBalance,\n  //   address: accounts[0]\n  // })\nsetConnected(true)\n}\n\nuseEffect(() => {\n  if(!window.ethereum) return;\n  // binding handlers to wallet events we care about\n  window.ethereum.on(\"connect\", eagerConnect)\n  window.ethereum.on(\"accountsChanged\", handleAccountChanged)\n  window.ethereum.on('chainChanged', handleChainChanged);\n},\n// eslint-disable-next-line\n[])\n\n\nconst connectWallet = async() =>{\n  if (!!window.ethereum || !!window.web3) {\n   await window.ethereum.request({ method: 'eth_requestAccounts' }); \n   toast.success(\"wallet connected!\")\n  }else{\n    toast.dark(\"use an ethereum enabled\")\n  }\n}\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <ToastContainer/>\n      <Header \n      connectWallet={connectWallet}\n      userInfo={userInfo}\n      connected={connected}\n      />\n      <main className='main'>\n        <MyStake\n        />\n        <StakeHistory\n        />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}