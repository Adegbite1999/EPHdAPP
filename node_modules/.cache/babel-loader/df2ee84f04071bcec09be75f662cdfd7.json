{"ast":null,"code":"var _jsxFileName = \"/home/adegbite/stakingEPH/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Contract, ethers, utils } from 'ethers';\nimport { formatDate } from \"./utils/helpers\";\nimport { contractAddress } from \"./utils/web3/constant\";\nimport abi from \"./utils/web3/abi/abi.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [connected, setConnected] = useState(false);\n  const [loading, setLoading] = useState(false); // const [stakeInput, setStakeInput] = useState(\"\")\n  // const [stakeAmount, setStakeAmount] = useState(null)\n  // const [withdrawInput, setWithdrawInput] = useState(\"\")\n  // const [stakeHistory, setStakeHistory] = useState([])\n  // const [withdrawHistory, setWithdrawHistory] = useState([])\n  // const [withdrawAmount, setWithdrawAmount] = useState(null)\n  // const [reward, setReward] = useState(null)\n  // const [addressInput, setAddressInput] = useState(\"\")\n  // const [data, setAddressData] = useState([])\n\n  const [userInfo, setUserInfo] = useState({\n    matic_balance: 0,\n    token_balance: 0,\n    address: null\n  });\n\n  const getAccountDetails = async address => {\n    setLoading(true);\n\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userEthBal = await provider.getBalance(address);\n      const TokenContractInstance = new Contract(contractAddress, abi, provider);\n      const userBRTBalance = await TokenContractInstance.balanceOf(address);\n      setLoading(false);\n      return {\n        userBRTBalance,\n        userEthBal\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleChainChanged = async chainid => {\n    if (Number(chainid) !== 80001) {\n      setConnected(false);\n      setUserInfo({\n        matic_balance: 0,\n        token_balance: 0,\n        address: null\n      });\n      return toast.error(\"You are connected to the wrong network, please switch to mumbai\");\n    } else {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.listAccounts();\n      if (!accounts.length) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        eth_balance: accountDetails.userEthBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n    }\n  }; // handler for when user switch from one account to another or completely disconnected\n\n\n  const handleAccountChanged = async accounts => {\n    if (!!accounts.length) {\n      const networkId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n      if (Number(networkId) !== 80001) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        matic_balance: accountDetails.userEthBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n    } else {\n      setConnected(false);\n      setUserInfo({\n        eth_balance: 0,\n        token_balance: 0,\n        address: null\n      });\n    }\n  };\n\n  const connectWallet = async () => {\n    setLoading(true);\n\n    try {\n      if (!!!window.ethereum || !!!window.web3) {\n        toast.error('please connect to an ethereum enabled browser');\n        return;\n      }\n\n      const networkId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n\n      if (!!window.ethereum || !!window.web3) {\n        if (Number(networkId) === 80001) {\n          await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          toast.success(\"wallet connected!\");\n        } else {\n          await error();\n        }\n      }\n\n      setLoading(false);\n    } catch (error) {\n      toast.error(error);\n      setLoading(false);\n    }\n  };\n\n  const error = async () => {\n    const networkId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n    if (Number(networkId) !== 80001) toast.error(\"please connect to mumbai network\");\n  }; // const eagerConnect = async () =>{\n  //   const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n  //   if(Number(networkId) !== 80001) return;\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum)\n  //   const accounts = await provider.listAccounts();\n  //   if(!accounts.length)return;\n  //   const accountDetails = await getAccountDetails(accounts[0])\n  //   setUserInfo({\n  //     matic_balance:accountDetails.userEthBal,\n  //     token_balance:accountDetails.userBRTBalance,\n  //     address: accounts[0]\n  //   })\n  // setConnected(true)\n  // }\n  // useEffect(() => {\n  //   // init()\n  //   // withdraw()\n  //   if(!window.ethereum) return;\n  //   // binding handlers to wallet events we care about\n  //   window.ethereum.on(\"connect\", eagerConnect)\n  //   window.ethereum.on(\"accountsChanged\", handleAccountChanged)\n  //   window.ethereum.on('chainChanged', handleChainChanged);\n  //   // getStakeAmount()\n  //   // getStakeReward()\n  // },\n  // // eslint-disable-next-line\n  // [connectWallet])\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      connectWallet: connectWallet,\n      userInfo: userInfo,\n      connected: connected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(MyStake, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StakeHistory, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"twmZoGZoMOILMVUASgcOZNzF2j0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adegbite/stakingEPH/src/App.js"],"names":["useEffect","useState","Header","MyStake","StakeHistory","Footer","ToastContainer","toast","Contract","ethers","utils","formatDate","contractAddress","abi","App","connected","setConnected","loading","setLoading","userInfo","setUserInfo","matic_balance","token_balance","address","getAccountDetails","provider","providers","Web3Provider","window","ethereum","userEthBal","getBalance","TokenContractInstance","userBRTBalance","balanceOf","err","console","log","handleChainChanged","chainid","Number","error","accounts","listAccounts","length","accountDetails","eth_balance","handleAccountChanged","networkId","request","method","connectWallet","web3","success"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Contract, ethers,utils } from 'ethers';\nimport { formatDate } from \"./utils/helpers\";\nimport {contractAddress} from \"./utils/web3/constant\"\nimport abi from \"./utils/web3/abi/abi.json\"\n\n\n\n\n\n\nfunction App() {\n\n  const [connected, setConnected] = useState(false) \n  const [loading, setLoading] = useState(false)\n  // const [stakeInput, setStakeInput] = useState(\"\")\n  // const [stakeAmount, setStakeAmount] = useState(null)\n  // const [withdrawInput, setWithdrawInput] = useState(\"\")\n  // const [stakeHistory, setStakeHistory] = useState([])\n  // const [withdrawHistory, setWithdrawHistory] = useState([])\n  // const [withdrawAmount, setWithdrawAmount] = useState(null)\n  // const [reward, setReward] = useState(null)\n  // const [addressInput, setAddressInput] = useState(\"\")\n  // const [data, setAddressData] = useState([])\n\n  \n  const [userInfo, setUserInfo] = useState({\n    matic_balance: 0,\n    token_balance:0,\n    address: null\n  })\n\n  const getAccountDetails = async (address) => {\n    setLoading(true)\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userEthBal = await provider.getBalance(address);\n      const TokenContractInstance = new Contract(contractAddress, abi, provider);\n      const userBRTBalance = await TokenContractInstance.balanceOf(address)\n      setLoading(false)\n      return {userBRTBalance, userEthBal}\n    }catch(err) {\n      console.log(err)\n    }\n  }\n\n  const handleChainChanged = async (chainid) => {\n    if(Number(chainid) !== 80001) {\n      setConnected(false)\n      setUserInfo({\n        matic_balance: 0,\n        token_balance: 0,\n        address: null\n      })\n      \n    return  toast.error(\"You are connected to the wrong network, please switch to mumbai\")\n    }else {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.listAccounts();\n      if(!accounts.length) return\n      const accountDetails = await getAccountDetails(accounts[0])\n        setUserInfo({\n          eth_balance: accountDetails.userEthBal,\n          token_balance: accountDetails.userBRTBalance,\n          address: accounts[0]\n        })\n        setConnected(true)\n      }\n  }\n      // handler for when user switch from one account to another or completely disconnected\n      const handleAccountChanged = async (accounts) => {\n        if(!!accounts.length) {\n          const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n          if(Number(networkId) !== 80001) return\n          const accountDetails = await getAccountDetails(accounts[0])\n    \n          setUserInfo({\n            matic_balance: accountDetails.userEthBal,\n            token_balance: accountDetails.userBRTBalance,\n            address: accounts[0]\n          })\n          setConnected(true)\n        }else {\n          setConnected(false)\n          setUserInfo({\n            eth_balance: 0,\n            token_balance: 0,\n            address: null\n          })\n          \n        }\n      }\n\n\n  const connectWallet = async() =>{\n    setLoading(true)\n  try {\n    if (!!!window.ethereum || !!!window.web3){\n      toast.error('please connect to an ethereum enabled browser')\n      return;\n    }\n    const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n    if (!!window.ethereum || !!window.web3) {\n      if((Number(networkId) === 80001)){\n       await window.ethereum.request({ method: 'eth_requestAccounts' }); \n        toast.success(\"wallet connected!\")\n     }else{\n   await error()\n     }\n    }\n    setLoading(false)\n  } catch (error) {\n    toast.error(error)\n    setLoading(false)\n  }\n  }\n\n  const error = async() => {\n    const networkId = await window.ethereum.request({method:\"eth_chainId\"})\n    if(Number(networkId) !== 80001) toast.error(\"please connect to mumbai network\")\n    }\n\n    // const eagerConnect = async () =>{\n    //   const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n    //   if(Number(networkId) !== 80001) return;\n    //   const provider = new ethers.providers.Web3Provider(window.ethereum)\n    //   const accounts = await provider.listAccounts();\n    //   if(!accounts.length)return;\n    //   const accountDetails = await getAccountDetails(accounts[0])\n    //   setUserInfo({\n    //     matic_balance:accountDetails.userEthBal,\n    //     token_balance:accountDetails.userBRTBalance,\n    //     address: accounts[0]\n    //   })\n    // setConnected(true)\n    // }\n\n    // useEffect(() => {\n    //   // init()\n    //   // withdraw()\n    //   if(!window.ethereum) return;\n    //   // binding handlers to wallet events we care about\n    //   window.ethereum.on(\"connect\", eagerConnect)\n    //   window.ethereum.on(\"accountsChanged\", handleAccountChanged)\n    //   window.ethereum.on('chainChanged', handleChainChanged);\n    //   // getStakeAmount()\n    //   // getStakeReward()\n    // },\n    // // eslint-disable-next-line\n    // [connectWallet])\n  return (\n    <div className=\"App\">\n      <ToastContainer/>\n      <Header \n      connectWallet={connectWallet}\n      userInfo={userInfo}\n      connected={connected}\n      />\n      <main className='main'>\n        <MyStake\n        />\n        <StakeHistory\n        />\n      </main>\n      {/* <Footer /> */}\n    </div>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}