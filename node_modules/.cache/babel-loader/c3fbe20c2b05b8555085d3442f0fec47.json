{"ast":null,"code":"var _jsxFileName = \"/home/adegbite/stakingEPH/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Contract, ethers, utils } from 'ethers';\nimport { formatDate } from \"./utils/helpers\";\nimport { contractAddress } from \"./utils/web3/constant\";\nimport abi from \"./utils/web3/abi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //a flag to check status of user\n  const [loading, setLoading] = useState(false);\n  const [connected, setConnected] = useState(false); // const [withdrawAmount, setWithdrawAmount] = useState(null)\n\n  const [userInfo, setUserInfo] = useState({\n    eth_balance: 0,\n    token_balance: 0,\n    address: null\n  }); // inputChange\n  // const onChangeInputHandler = ({target}) =>{\n  //   switch (target.id) {\n  //     case \"stake\":\n  //       setStakeInput(target.value)\n  //       break;\n  //       case \"withdraw\":\n  //         setWithdrawInput(target.value)\n  //         break;\n  //         case \"address\":\n  //           setAddressInput(target.value)\n  //           break;\n  //     default:\n  //       break;\n  //   }\n  // } \n\n  const getAccountDetails = async address => {\n    setLoading(true);\n\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userEthBal = await provider.getBalance(address);\n      const TokenContractInstance = new Contract(contractAddress, abi, provider);\n      const userBRTBalance = await TokenContractInstance.balanceOf(address);\n      setLoading(false);\n      return {\n        userBRTBalance,\n        userEthBal\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const connectWallet = async () => {\n    setLoading(true);\n\n    try {\n      if (!!!window.ethereum || !!!window.web3) {\n        toast.error('please connect to an ethereum enabled browser');\n        return;\n      }\n\n      const networkId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n\n      if (!!window.ethereum || !!window.web3) {\n        if (Number(networkId) === 80001) {\n          await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          toast.success(\"wallet connected!\");\n        } else {//  await error()\n        }\n      }\n\n      setLoading(false);\n    } catch (error) {\n      toast.error(error);\n      setLoading(false);\n    }\n  };\n\n  const eagerConnect = async () => {\n    const networkId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n    if (Number(networkId) !== 80001) return;\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const accounts = await provider.listAccounts();\n    if (!accounts.length) return;\n    const accountDetails = await getAccountDetails(accounts[0]);\n    setUserInfo({\n      eth_balance: accountDetails.userEthBal,\n      token_balance: accountDetails.userBRTBalance,\n      address: accounts[0]\n    });\n    setConnected(true);\n  };\n\n  const error = async () => {\n    const networkId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n    if (Number(networkId) !== 4) toast.error(\"please connect to rinkeby network\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      connectWallet: connectWallet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(MyStake, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StakeHistory, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"F7dVMFtVNGaeyoZppTmMIQNITxA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adegbite/stakingEPH/src/App.js"],"names":["useEffect","useState","Header","MyStake","StakeHistory","Footer","ToastContainer","toast","Contract","ethers","utils","formatDate","contractAddress","abi","App","loading","setLoading","connected","setConnected","userInfo","setUserInfo","eth_balance","token_balance","address","getAccountDetails","provider","providers","Web3Provider","window","ethereum","userEthBal","getBalance","TokenContractInstance","userBRTBalance","balanceOf","err","console","log","connectWallet","web3","error","networkId","request","method","Number","success","eagerConnect","accounts","listAccounts","length","accountDetails"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Contract, ethers,utils } from 'ethers';\nimport { formatDate } from \"./utils/helpers\";\nimport {contractAddress} from \"./utils/web3/constant\";\nimport abi from \"./utils/web3/abi\";\n\n\n\n\n\n\n\nfunction App() {\n  //a flag to check status of user\nconst [loading, setLoading] = useState(false)\nconst [connected,setConnected] = useState(false)\n  // const [withdrawAmount, setWithdrawAmount] = useState(null)\n\n  const [userInfo, setUserInfo] = useState({\n    eth_balance: 0,\n    token_balance:0,\n    address: null\n  })\n\n\n\n// inputChange\n// const onChangeInputHandler = ({target}) =>{\n//   switch (target.id) {\n//     case \"stake\":\n//       setStakeInput(target.value)\n//       break;\n//       case \"withdraw\":\n//         setWithdrawInput(target.value)\n//         break;\n//         case \"address\":\n//           setAddressInput(target.value)\n//           break;\n//     default:\n//       break;\n//   }\n// } \n\nconst getAccountDetails = async (address) => {\n  setLoading(true)\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const userEthBal = await provider.getBalance(address);\n    const TokenContractInstance = new Contract(contractAddress, abi, provider);\n    const userBRTBalance = await TokenContractInstance.balanceOf(address)\n    setLoading(false)\n    return {userBRTBalance, userEthBal}\n  }catch(err) {\n    console.log(err)\n  }\n}\n\nconst connectWallet = async() =>{\n  setLoading(true)\ntry {\n  if (!!!window.ethereum || !!!window.web3){\n    toast.error('please connect to an ethereum enabled browser')\n    return;\n  }\n  const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n  if (!!window.ethereum || !!window.web3) {\n    if((Number(networkId) === 80001)){\n     await window.ethereum.request({ method: 'eth_requestAccounts' }); \n      toast.success(\"wallet connected!\")\n   }else{\n//  await error()\n   }\n  }\n  setLoading(false)\n} catch (error) {\n  toast.error(error)\n  setLoading(false)\n}\n}\n\nconst eagerConnect = async () =>{\n  const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n  if(Number(networkId) !== 80001) return;\n  const provider = new ethers.providers.Web3Provider(window.ethereum)\n  const accounts = await provider.listAccounts();\n  if(!accounts.length)return;\n  const accountDetails = await getAccountDetails(accounts[0])\n  setUserInfo({\n    eth_balance:accountDetails.userEthBal,\n    token_balance:accountDetails.userBRTBalance,\n    address: accounts[0]\n  })\nsetConnected(true)\n}\nconst error = async() => {\nconst networkId = await window.ethereum.request({method:\"eth_chainId\"})\nif(Number(networkId) !== 4) toast.error(\"please connect to rinkeby network\")\n}\n\n\n\n  return (\n    <div className=\"App\">\n      <ToastContainer/>\n      <Header \n      connectWallet={connectWallet}\n      />\n      <main className='main'>\n        <MyStake\n        />\n        <StakeHistory\n        />\n      </main>\n      {/* <Footer /> */}\n    </div>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}