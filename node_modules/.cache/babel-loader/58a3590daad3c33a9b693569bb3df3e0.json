{"ast":null,"code":"var _jsxFileName = \"/home/adegbite/stakingDapp/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport abi from \"./utils/web3/abi.json\";\nimport { Contract, ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x40960D06132BBCBAA3FfA1B77d10e57C8578eF95\";\n\nfunction App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  //a flag to check status of user\n  const [connected, setConnected] = useState(false); // user details i.e ETH balance && brt balance && address\n\n  const [userInfo, setUserInfo] = useState({\n    eth_balance: 0,\n    token_balance: 0,\n    address: null\n  }); // console.log(userInfo)\n\n  const getAccountDetails = async address => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userEthBal = await provider.getBalance(address);\n      const BRTContractInstance = await new Contract(contractAddress, abi, provider);\n      const userBRTBalance = await BRTContractInstance.balanceOf(address);\n      return {\n        userEthBal,\n        userBRTBalance\n      };\n    } catch (error) {\n      toast.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    _s();\n\n    if (typeof window.ethereum !== 'undefined' || typeof window.web3 !== 'undefined') {\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      toast.success(\"wallet connected!\");\n    } else {\n      toast.dark(\"use an ethereum enabled\");\n    } // eager connect: an handler to eagerly connec user and fetch their data\n\n\n    const eagerConnect = async () => {\n      const networkId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n      if (Number(networkId) !== 4) return {};\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.listAccounts();\n      if (!accounts.length) return {};\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        eth_balance: accountDetails.userEthBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n    };\n\n    useEffect(() => {\n      if (!window.ethereum) return;\n      window.ethereum.on(\"connect\", eagerConnect);\n    }, // eslint-disable-next-line\n    []);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        connectWallet: connectWallet,\n        userInfo: userInfo,\n        connected: connected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(MyStake, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(StakeHistory, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this);\n  };\n\n  _s(connectWallet, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n}\n\n_s2(App, \"UoKAW919r3SxktV9yrNOPljVyqg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adegbite/stakingDapp/src/App.js"],"names":["useEffect","useState","Header","MyStake","StakeHistory","Footer","ToastContainer","toast","abi","Contract","ethers","contractAddress","App","connected","setConnected","userInfo","setUserInfo","eth_balance","token_balance","address","getAccountDetails","provider","providers","Web3Provider","window","ethereum","userEthBal","getBalance","BRTContractInstance","userBRTBalance","balanceOf","error","connectWallet","web3","request","method","success","dark","eagerConnect","networkId","Number","accounts","listAccounts","length","accountDetails","on"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport abi from \"./utils/web3/abi.json\";\nimport { Contract, ethers } from 'ethers';\nconst contractAddress = \"0x40960D06132BBCBAA3FfA1B77d10e57C8578eF95\";\n\n\n\n\n\n\nfunction App() {\n  //a flag to check status of user\n  const [connected, setConnected] = useState(false)\n\n\n  // user details i.e ETH balance && brt balance && address\n\n  const [userInfo, setUserInfo] = useState({\n    eth_balance: 0,\n    token_balance:0,\n    address: null\n  })\n\n// console.log(userInfo)\n  const getAccountDetails = async(address) => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const userEthBal = await provider.getBalance(address)\n      const BRTContractInstance = await new Contract(contractAddress,abi,provider)\n      const userBRTBalance = await BRTContractInstance.balanceOf(address)\n      return {userEthBal, userBRTBalance}\n    } catch (error) {\n      toast.error(error)\n    }\n  }\n  \n\n\nconst connectWallet = async() =>{\n  if (typeof window.ethereum !== 'undefined' || typeof window.web3 !== 'undefined') {\n   await window.ethereum.request({ method: 'eth_requestAccounts' }); \n   toast.success(\"wallet connected!\")\n  }else{\n    toast.dark(\"use an ethereum enabled\")\n  }\n// eager connect: an handler to eagerly connec user and fetch their data\n\nconst eagerConnect = async () =>{\n  const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n  if(Number(networkId) !== 4) return{}\n  const provider = new ethers.providers.Web3Provider(window.ethereum)\n  const accounts = await provider.listAccounts();\n  if(!accounts.length)return{}\n  const accountDetails = await getAccountDetails(accounts[0])\n  setUserInfo({\n    eth_balance:accountDetails.userEthBal,\n    token_balance:accountDetails.userBRTBalance,\n    address: accounts[0]\n  })\nsetConnected(true)\n}\n\nuseEffect(() => {\nif(!window.ethereum)return;\nwindow.ethereum.on(\"connect\", eagerConnect)\n},\n// eslint-disable-next-line\n[])\n\n\n\n  return (\n    <div className=\"App\">\n      <ToastContainer/>\n      <Header \n      connectWallet={connectWallet}\n      userInfo={userInfo}\n      connected={connected}\n      />\n      <main className='main'>\n        <MyStake\n        />\n        <StakeHistory\n        />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}