{"ast":null,"code":"var _jsxFileName = \"/home/adegbite/stakingEPH/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Contract, ethers, utils } from 'ethers';\nimport { formatDate } from \"./utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [connected, setConnected] = useState(false);\n  const [loading, setLoading] = useState(false); // const [stakeInput, setStakeInput] = useState(\"\")\n  // const [stakeAmount, setStakeAmount] = useState(null)\n  // const [withdrawInput, setWithdrawInput] = useState(\"\")\n  // const [stakeHistory, setStakeHistory] = useState([])\n  // const [withdrawHistory, setWithdrawHistory] = useState([])\n  // const [withdrawAmount, setWithdrawAmount] = useState(null)\n  // const [reward, setReward] = useState(null)\n  // const [addressInput, setAddressInput] = useState(\"\")\n  // const [data, setAddressData] = useState([])\n  // const getAccountDetails = async (address) => {\n  //   setLoading(true)\n  //   try {\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //     const userEthBal = await provider.getBalance(address);\n  //     const TokenContractInstance = new Contract(tokenAddress, token, provider);\n  //     const userBRTBalance = await TokenContractInstance.balanceOf(address)\n  //     setLoading(false)\n  //     return {userBRTBalance, userEthBal}\n  //   }catch(err) {\n  //     console.log(err)\n  //   }\n  // }\n  // const handleChainChanged = async (chainid) => {\n  //   if(Number(chainid) !== 80001) {\n  //     setConnected(false)\n  //     setUserInfo({\n  //       eth_balance: 0,\n  //       token_balance: 0,\n  //       address: null\n  //     })\n  //   return  toast.error(\"You are connected to the wrong network, please switch to rinkeby\")\n  //   }else {\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //     const accounts = await provider.listAccounts();\n  //     if(!accounts.length) return\n  //     const accountDetails = await getAccountDetails(accounts[0])\n  //       setUserInfo({\n  //         eth_balance: accountDetails.userEthBal,\n  //         token_balance: accountDetails.userBRTBalance,\n  //         address: accounts[0]\n  //       })\n  //       setConnected(true)\n  //     }\n  // }\n  // handler for when user switch from one account to another or completely disconnected\n  // const handleAccountChanged = async (accounts) => {\n  //   if(!!accounts.length) {\n  //     const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n  //     if(Number(networkId) !== 80001) return\n  //     const accountDetails = await getAccountDetails(accounts[0])\n  //     setUserInfo({\n  //       eth_balance: accountDetails.userEthBal,\n  //       token_balance: accountDetails.userBRTBalance,\n  //       address: accounts[0]\n  //     })\n  //     setConnected(true)\n  //   }else {\n  //     setConnected(false)\n  //     setUserInfo({\n  //       eth_balance: 0,\n  //       token_balance: 0,\n  //       address: null\n  //     })\n  //   }\n  // }\n\n  const [userInfo, setUserInfo] = useState({\n    matic_balance: 0,\n    token_balance: 0,\n    address: null\n  });\n\n  const connectWallet = async () => {\n    setLoading(true);\n\n    try {\n      if (!!!window.ethereum || !!!window.web3) {\n        toast.error('please connect to an ethereum enabled browser');\n        return;\n      }\n\n      const networkId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n\n      if (!!window.ethereum || !!window.web3) {\n        if (Number(networkId) === 80001) {\n          await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          toast.success(\"wallet connected!\");\n        } else {\n          await error();\n        }\n      }\n\n      setLoading(false);\n    } catch (error) {\n      toast.error(error);\n      setLoading(false);\n    }\n  };\n\n  const error = async () => {\n    const networkId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n    if (Number(networkId) !== 80001) toast.error(\"please connect to mumbai network\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      connectWallet: connectWallet,\n      userInfo: userInfo,\n      connected: connected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(MyStake, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StakeHistory, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/HE/TybDt5PFLMchhJrOoWt55a0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adegbite/stakingEPH/src/App.js"],"names":["useEffect","useState","Header","MyStake","StakeHistory","Footer","ToastContainer","toast","Contract","ethers","utils","formatDate","App","connected","setConnected","loading","setLoading","userInfo","setUserInfo","matic_balance","token_balance","address","connectWallet","window","ethereum","web3","error","networkId","request","method","Number","success"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA0BC,KAA1B,QAAuC,QAAvC;AACA,SAASC,UAAT,QAA2B,iBAA3B;;;AAQA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,KAAD,CAAtC,CAHa,CAIb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC;AACvCkB,IAAAA,aAAa,EAAE,CADwB;AAEvCC,IAAAA,aAAa,EAAC,CAFyB;AAGvCC,IAAAA,OAAO,EAAE;AAH8B,GAAD,CAAxC;;AAMJ,QAAMC,aAAa,GAAG,YAAU;AAC9BN,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACF,QAAI;AACF,UAAI,CAAC,CAAC,CAACO,MAAM,CAACC,QAAV,IAAsB,CAAC,CAAC,CAACD,MAAM,CAACE,IAApC,EAAyC;AACvClB,QAAAA,KAAK,CAACmB,KAAN,CAAY,+CAAZ;AACA;AACD;;AACD,YAAMC,SAAS,GAAG,MAAMJ,MAAM,CAACC,QAAP,CAAgBI,OAAhB,CAAwB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAxB,CAAxB;;AACA,UAAI,CAAC,CAACN,MAAM,CAACC,QAAT,IAAqB,CAAC,CAACD,MAAM,CAACE,IAAlC,EAAwC;AACtC,YAAIK,MAAM,CAACH,SAAD,CAAN,KAAsB,KAA1B,EAAiC;AAChC,gBAAMJ,MAAM,CAACC,QAAP,CAAgBI,OAAhB,CAAwB;AAAEC,YAAAA,MAAM,EAAE;AAAV,WAAxB,CAAN;AACCtB,UAAAA,KAAK,CAACwB,OAAN,CAAc,mBAAd;AACF,SAHA,MAGI;AACP,gBAAML,KAAK,EAAX;AACG;AACD;;AACDV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAfD,CAeE,OAAOU,KAAP,EAAc;AACdnB,MAAAA,KAAK,CAACmB,KAAN,CAAYA,KAAZ;AACAV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACA,GArBD;;AAuBA,QAAMU,KAAK,GAAG,YAAW;AACvB,UAAMC,SAAS,GAAG,MAAMJ,MAAM,CAACC,QAAP,CAAgBI,OAAhB,CAAwB;AAACC,MAAAA,MAAM,EAAC;AAAR,KAAxB,CAAxB;AACA,QAAGC,MAAM,CAACH,SAAD,CAAN,KAAsB,KAAzB,EAAgCpB,KAAK,CAACmB,KAAN,CAAY,kCAAZ;AAC/B,GAHH;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AACA,MAAA,aAAa,EAAEJ,aADf;AAEA,MAAA,QAAQ,EAAEL,QAFV;AAGA,MAAA,SAAS,EAAEJ;AAHX;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,8BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAGE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAhIQD,G;;KAAAA,G;AAkIT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Contract, ethers,utils } from 'ethers';\nimport { formatDate } from \"./utils/helpers\";\n\n\n\n\n\n\n\nfunction App() {\n\n  const [connected, setConnected] = useState(false) \n  const [loading, setLoading] = useState(false)\n  // const [stakeInput, setStakeInput] = useState(\"\")\n  // const [stakeAmount, setStakeAmount] = useState(null)\n  // const [withdrawInput, setWithdrawInput] = useState(\"\")\n  // const [stakeHistory, setStakeHistory] = useState([])\n  // const [withdrawHistory, setWithdrawHistory] = useState([])\n  // const [withdrawAmount, setWithdrawAmount] = useState(null)\n  // const [reward, setReward] = useState(null)\n  // const [addressInput, setAddressInput] = useState(\"\")\n  // const [data, setAddressData] = useState([])\n\n\n  // const getAccountDetails = async (address) => {\n  //   setLoading(true)\n  //   try {\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //     const userEthBal = await provider.getBalance(address);\n  //     const TokenContractInstance = new Contract(tokenAddress, token, provider);\n  //     const userBRTBalance = await TokenContractInstance.balanceOf(address)\n  //     setLoading(false)\n  //     return {userBRTBalance, userEthBal}\n  //   }catch(err) {\n  //     console.log(err)\n  //   }\n  // }\n\n  // const handleChainChanged = async (chainid) => {\n  //   if(Number(chainid) !== 80001) {\n  //     setConnected(false)\n  //     setUserInfo({\n  //       eth_balance: 0,\n  //       token_balance: 0,\n  //       address: null\n  //     })\n      \n  //   return  toast.error(\"You are connected to the wrong network, please switch to rinkeby\")\n  //   }else {\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //     const accounts = await provider.listAccounts();\n  //     if(!accounts.length) return\n  //     const accountDetails = await getAccountDetails(accounts[0])\n  //       setUserInfo({\n  //         eth_balance: accountDetails.userEthBal,\n  //         token_balance: accountDetails.userBRTBalance,\n  //         address: accounts[0]\n  //       })\n  //       setConnected(true)\n  //     }\n  // }\n      // handler for when user switch from one account to another or completely disconnected\n      // const handleAccountChanged = async (accounts) => {\n      //   if(!!accounts.length) {\n      //     const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n      //     if(Number(networkId) !== 80001) return\n      //     const accountDetails = await getAccountDetails(accounts[0])\n    \n      //     setUserInfo({\n      //       eth_balance: accountDetails.userEthBal,\n      //       token_balance: accountDetails.userBRTBalance,\n      //       address: accounts[0]\n      //     })\n      //     setConnected(true)\n      //   }else {\n      //     setConnected(false)\n      //     setUserInfo({\n      //       eth_balance: 0,\n      //       token_balance: 0,\n      //       address: null\n      //     })\n          \n      //   }\n      // }\n\n      const [userInfo, setUserInfo] = useState({\n        matic_balance: 0,\n        token_balance:0,\n        address: null\n      })\n\n  const connectWallet = async() =>{\n    setLoading(true)\n  try {\n    if (!!!window.ethereum || !!!window.web3){\n      toast.error('please connect to an ethereum enabled browser')\n      return;\n    }\n    const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n    if (!!window.ethereum || !!window.web3) {\n      if((Number(networkId) === 80001)){\n       await window.ethereum.request({ method: 'eth_requestAccounts' }); \n        toast.success(\"wallet connected!\")\n     }else{\n   await error()\n     }\n    }\n    setLoading(false)\n  } catch (error) {\n    toast.error(error)\n    setLoading(false)\n  }\n  }\n\n  const error = async() => {\n    const networkId = await window.ethereum.request({method:\"eth_chainId\"})\n    if(Number(networkId) !== 80001) toast.error(\"please connect to mumbai network\")\n    }\n\n  return (\n    <div className=\"App\">\n      <ToastContainer/>\n      <Header \n      connectWallet={connectWallet}\n      userInfo={userInfo}\n      connected={connected}\n      />\n      <main className='main'>\n        <MyStake\n        />\n        <StakeHistory\n        />\n      </main>\n      {/* <Footer /> */}\n    </div>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}