{"ast":null,"code":"var _jsxFileName = \"/home/adegbite/stakingEPH/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Contract, ethers, utils } from 'ethers';\nimport { formatDate } from \"./utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [connected, setConnected] = useState(false);\n  const [loading, setLoading] = useState(false); // const [stakeInput, setStakeInput] = useState(\"\")\n  // const [stakeAmount, setStakeAmount] = useState(null)\n  // const [withdrawInput, setWithdrawInput] = useState(\"\")\n  // const [stakeHistory, setStakeHistory] = useState([])\n  // const [withdrawHistory, setWithdrawHistory] = useState([])\n  // const [withdrawAmount, setWithdrawAmount] = useState(null)\n  // const [reward, setReward] = useState(null)\n  // const [addressInput, setAddressInput] = useState(\"\")\n  // const [data, setAddressData] = useState([])\n\n  const getAccountDetails = async address => {\n    setLoading(true);\n\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userEthBal = await provider.getBalance(address);\n      const TokenContractInstance = new Contract(tokenAddress, token, provider);\n      const userBRTBalance = await TokenContractInstance.balanceOf(address);\n      setLoading(false);\n      return {\n        userBRTBalance,\n        userEthBal\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleChainChanged = async chainid => {\n    if (Number(chainid) !== 80001) {\n      setConnected(false);\n      setUserInfo({\n        eth_balance: 0,\n        token_balance: 0,\n        address: null\n      });\n      return toast.error(\"You are connected to the wrong network, please switch to rinkeby\");\n    } else {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.listAccounts();\n      if (!accounts.length) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        eth_balance: accountDetails.userEthBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n    }\n  }; // handler for when user switch from one account to another or completely disconnected\n\n\n  const handleAccountChanged = async accounts => {\n    if (!!accounts.length) {\n      const networkId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n      if (Number(networkId) !== 80001) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        eth_balance: accountDetails.userEthBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n    } else {\n      setConnected(false);\n      setUserInfo({\n        eth_balance: 0,\n        token_balance: 0,\n        address: null\n      });\n    }\n  };\n\n  const connectWallet = async () => {\n    setLoading(true);\n\n    try {\n      if (!!!window.ethereum || !!!window.web3) {\n        toast.error('please connect to an ethereum enabled browser');\n        return;\n      }\n\n      const networkId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n\n      if (!!window.ethereum || !!window.web3) {\n        if (Number(networkId) === 80001) {\n          await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          toast.success(\"wallet connected!\");\n        } else {\n          await error();\n        }\n      }\n\n      setLoading(false);\n    } catch (error) {\n      toast.error(error);\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(MyStake, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StakeHistory, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fRFoH8jJfbURqsAwqavC0vDSAKM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adegbite/stakingEPH/src/App.js"],"names":["useEffect","useState","Header","MyStake","StakeHistory","Footer","ToastContainer","toast","Contract","ethers","utils","formatDate","App","connected","setConnected","loading","setLoading","getAccountDetails","address","provider","providers","Web3Provider","window","ethereum","userEthBal","getBalance","TokenContractInstance","tokenAddress","token","userBRTBalance","balanceOf","err","console","log","handleChainChanged","chainid","Number","setUserInfo","eth_balance","token_balance","error","accounts","listAccounts","length","accountDetails","handleAccountChanged","networkId","request","method","connectWallet","web3","success"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport Footer from './components/Footer/Footer';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Contract, ethers,utils } from 'ethers';\nimport { formatDate } from \"./utils/helpers\";\n\n\n\n\n\n\n\nfunction App() {\n\n  const [connected, setConnected] = useState(false) \n  const [loading, setLoading] = useState(false)\n  // const [stakeInput, setStakeInput] = useState(\"\")\n  // const [stakeAmount, setStakeAmount] = useState(null)\n  // const [withdrawInput, setWithdrawInput] = useState(\"\")\n  // const [stakeHistory, setStakeHistory] = useState([])\n  // const [withdrawHistory, setWithdrawHistory] = useState([])\n  // const [withdrawAmount, setWithdrawAmount] = useState(null)\n  // const [reward, setReward] = useState(null)\n  // const [addressInput, setAddressInput] = useState(\"\")\n  // const [data, setAddressData] = useState([])\n\n\n  const getAccountDetails = async (address) => {\n    setLoading(true)\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userEthBal = await provider.getBalance(address);\n      const TokenContractInstance = new Contract(tokenAddress, token, provider);\n      const userBRTBalance = await TokenContractInstance.balanceOf(address)\n      setLoading(false)\n      return {userBRTBalance, userEthBal}\n    }catch(err) {\n      console.log(err)\n    }\n  }\n\n  const handleChainChanged = async (chainid) => {\n    if(Number(chainid) !== 80001) {\n      setConnected(false)\n      setUserInfo({\n        eth_balance: 0,\n        token_balance: 0,\n        address: null\n      })\n      \n    return  toast.error(\"You are connected to the wrong network, please switch to rinkeby\")\n    }else {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.listAccounts();\n      if(!accounts.length) return\n      const accountDetails = await getAccountDetails(accounts[0])\n        setUserInfo({\n          eth_balance: accountDetails.userEthBal,\n          token_balance: accountDetails.userBRTBalance,\n          address: accounts[0]\n        })\n        setConnected(true)\n      }\n  }\n      // handler for when user switch from one account to another or completely disconnected\n      const handleAccountChanged = async (accounts) => {\n        if(!!accounts.length) {\n          const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n          if(Number(networkId) !== 80001) return\n          const accountDetails = await getAccountDetails(accounts[0])\n    \n          setUserInfo({\n            eth_balance: accountDetails.userEthBal,\n            token_balance: accountDetails.userBRTBalance,\n            address: accounts[0]\n          })\n          setConnected(true)\n        }else {\n          setConnected(false)\n          setUserInfo({\n            eth_balance: 0,\n            token_balance: 0,\n            address: null\n          })\n          \n        }\n      }\n\n  const connectWallet = async() =>{\n    setLoading(true)\n  try {\n    if (!!!window.ethereum || !!!window.web3){\n      toast.error('please connect to an ethereum enabled browser')\n      return;\n    }\n    const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n    if (!!window.ethereum || !!window.web3) {\n      if((Number(networkId) === 80001)){\n       await window.ethereum.request({ method: 'eth_requestAccounts' }); \n        toast.success(\"wallet connected!\")\n     }else{\n   await error()\n     }\n    }\n    setLoading(false)\n  } catch (error) {\n    toast.error(error)\n    setLoading(false)\n  }\n  }\n\n\n  return (\n    <div className=\"App\">\n      {/* <ToastContainer/> */}\n      <Header \n      />\n      <main className='main'>\n        <MyStake\n        />\n        <StakeHistory\n        />\n      </main>\n      {/* <Footer /> */}\n    </div>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}