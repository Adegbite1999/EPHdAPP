{"ast":null,"code":"var _jsxFileName = \"/home/adegbite/web3-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport { useEffect, useState } from 'react';\nimport Footer from './components/Footer/Footer';\nimport { Contract, ethers } from 'ethers';\nimport abi from './utils/web3/abi.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // the presence of wallet exposes the ethereum method to your browser\n  const [connected, setConnected] = useState(false);\n  const [userInfo, setUserInfo] = useState({\n    matic_balance: 0,\n    token_balance: 0,\n    address: null\n  });\n  const [stakeAmount, setStakeAmount] = useState(null);\n  const [rewardAmount, setRewardAmount] = useState(null);\n  const [stakeInput, setStakeInput] = useState(\"\");\n  const [withdrawInput, setWithdrawInput] = useState(\"\");\n  const [stateHistory, setStakeHistory] = useState([{\n    amount: 1000,\n    account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n    time: \"1647975426\",\n    type: \"stake\"\n  }, {\n    amount: 1000,\n    account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n    time: \"1647975426\",\n    type: \"stake\"\n  }, {\n    amount: 1000,\n    account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n    time: \"1647975426\",\n    type: \"unstake\"\n  }, {\n    amount: 1000,\n    account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n    time: \"1647975426\",\n    type: \"stake\"\n  }, {\n    amount: 1000,\n    account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n    time: \"1647975426\",\n    type: \"unstake\"\n  }, {\n    amount: 1000,\n    account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n    time: \"1647975426\",\n    type: \"stake\"\n  }]);\n\n  const handleAccountChanged = async accounts => {\n    if (!!accounts.length) {\n      const network = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n      console.log(network);\n    } else {\n      setUserInfo({\n        matic_balance: 0,\n        token_balance: 0,\n        address: null\n      });\n    }\n  };\n\n  useEffect(() => {\n    // if(!!window.ethereum)return{}\n    // append handlers\n    window.ethereum.on(\"connect\", async payload => {\n      if (Number(payload.chainId) !== 80001) return alert(\"you are on the wrong network, please chnage to mumbia\"); // you are on the right network\n\n      const provider = await new ethers.providers.Web3Provider(window.ethereum);\n      const account = await provider.listAccounts();\n      const userMatic = await provider.getBalance(account[0]); // get signer\n\n      const signer = provider.getSigner();\n      const BRTContractInstance = new Contract(\"0x169E82570feAc981780F3C48Ee9f05CED1328e1b\", abi, provider);\n      const userTokenBalance = await BRTContractInstance.balanceOf(account[0]);\n      setUserInfo({\n        matic_balance: userMatic,\n        token_balance: userTokenBalance,\n        address: account[0]\n      });\n      setConnected(true);\n    });\n    window.ethereum.on(\"accountChanged\", handleAccountChanged);\n  }, []); // To  connect wallet\n\n  const connectWallet = async () => {\n    // logic\n    // check if window.ethereum is present by running the method eth_requestAccounts: this makes metamask pop up\n    if (!!window.ethereum || !!window.web3) {\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      }); // ensure the user is on the right network\n    } // setConnected(true)\n    // setUserInfo(\n    //   {\n    //     matic_balance: \"63549678582439050349\",\n    //     token_balance: \"65045396805965968546\",\n    //     address: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\"\n    //   }\n    // )\n\n  };\n\n  const onChangeInput = _ref => {\n    let {\n      target\n    } = _ref;\n\n    switch (target.id) {\n      case \"stake\":\n        setStakeInput(target.value);\n        break;\n\n      case \"unstake\":\n        setWithdrawInput(target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const onClickStake = e => {\n    e.preventDefault();\n    console.log(\"staking...........\", stakeInput);\n  };\n\n  const onClickWithdraw = e => {\n    e.preventDefault();\n    console.log(\"unstaking...........\", withdrawInput);\n  }; // 0x169E82570feAc981780F3C48Ee9f05CED1328e1b\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      connectWallet: connectWallet,\n      connected: connected,\n      userInfo: userInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(MyStake, {\n        stakeInput: stakeInput,\n        withdrawInput: withdrawInput,\n        onChangeInput: onChangeInput,\n        onClickStake: onClickStake,\n        onClickWithdraw: onClickWithdraw,\n        stakeAmount: stakeAmount,\n        rewardAmount: rewardAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StakeHistory, {\n        stakeData: stateHistory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vyrb0MQJzzrApkWaqyB53xirR7Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adegbite/web3-frontend/src/App.js"],"names":["Header","MyStake","StakeHistory","useEffect","useState","Footer","Contract","ethers","abi","App","connected","setConnected","userInfo","setUserInfo","matic_balance","token_balance","address","stakeAmount","setStakeAmount","rewardAmount","setRewardAmount","stakeInput","setStakeInput","withdrawInput","setWithdrawInput","stateHistory","setStakeHistory","amount","account","time","type","handleAccountChanged","accounts","length","network","window","ethereum","request","method","console","log","on","payload","Number","chainId","alert","provider","providers","Web3Provider","listAccounts","userMatic","getBalance","signer","getSigner","BRTContractInstance","userTokenBalance","balanceOf","connectWallet","web3","onChangeInput","target","id","value","onClickStake","e","preventDefault","onClickWithdraw"],"mappings":"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","sourcesContent":["import './App.css';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport {useEffect, useState} from 'react'\nimport Footer from './components/Footer/Footer';\nimport { Contract, ethers } from 'ethers';\nimport abi from './utils/web3/abi.json'\n\nfunction App() {\n// the presence of wallet exposes the ethereum method to your browser\n  const [connected, setConnected] = useState(false);\n\n  const [userInfo, setUserInfo] = useState({\n    matic_balance: 0,\n    token_balance: 0,\n    address: null\n  });\n\n  const [stakeAmount, setStakeAmount] = useState(null)\n  const [rewardAmount, setRewardAmount] = useState(null)\n\n  const [stakeInput, setStakeInput] = useState(\"\");\n  const [withdrawInput, setWithdrawInput] = useState(\"\");\n\n  const [stateHistory, setStakeHistory] = useState([\n    {\n      amount: 1000,\n      account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n      time: \"1647975426\",\n      type: \"stake\"\n    },\n    {\n      amount: 1000,\n      account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n      time: \"1647975426\",\n      type: \"stake\"\n    },\n    {\n      amount: 1000,\n      account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n      time: \"1647975426\",\n      type: \"unstake\"\n    },\n    {\n      amount: 1000,\n      account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n      time: \"1647975426\",\n      type: \"stake\"\n    },\n    {\n      amount: 1000,\n      account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n      time: \"1647975426\",\n      type: \"unstake\"\n    },\n    {\n      amount: 1000,\n      account: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\",\n      time: \"1647975426\",\n      type: \"stake\"\n    }\n  ])\n\n\n\n  const handleAccountChanged = async(accounts) =>{\n    if(!!accounts.length){\n      const network = await window.ethereum.request({method: \"eth_chainId\"})\n      console.log(network)\n    }else{\n      setUserInfo({\n        matic_balance: 0,\n        token_balance: 0,\n        address: null\n      })\n    }\n  }\n\n  useEffect(() =>{\n    // if(!!window.ethereum)return{}\n    // append handlers\n    window.ethereum.on(\"connect\", async(payload) =>{\n      if(Number(payload.chainId) !== 80001) return alert( \"you are on the wrong network, please chnage to mumbia\")\n    \n    // you are on the right network\n    const provider = await new ethers.providers.Web3Provider(window.ethereum)\n    const  account= await provider.listAccounts()\n    const userMatic = await provider.getBalance(account[0])\n    // get signer\n    const signer = provider.getSigner()\n    const BRTContractInstance = new Contract(\"0x169E82570feAc981780F3C48Ee9f05CED1328e1b\",abi,provider)\n      const userTokenBalance = await BRTContractInstance.balanceOf(account[0])\n      setUserInfo({\n          matic_balance: userMatic,\n          token_balance: userTokenBalance,\n          address: account[0]\n        })\n        setConnected(true)\n      })\n      window.ethereum.on(\"accountChanged\", handleAccountChanged)\n  },[])\n// To  connect wallet\n  const connectWallet = async () => {\n    // logic\n    // check if window.ethereum is present by running the method eth_requestAccounts: this makes metamask pop up\n    if(!!window.ethereum || !!window.web3){\nawait window.ethereum.request({method:\"eth_requestAccounts\"})\n// ensure the user is on the right network\n\n    }\n\n    // setConnected(true)\n    // setUserInfo(\n    //   {\n    //     matic_balance: \"63549678582439050349\",\n    //     token_balance: \"65045396805965968546\",\n    //     address: \"0xE428Db9A3B47046acb020B8B5a5B29b8792a1415\"\n    //   }\n    // )\n  }\n\n  const onChangeInput = ({target}) => {\n    switch (target.id) {\n      case \"stake\":\n        setStakeInput(target.value)\n        break;\n\n      case \"unstake\":\n        setWithdrawInput(target.value);\n        break;\n    \n      default:\n        break;\n    }\n  }\n\n  const onClickStake = (e) => {\n    e.preventDefault()\n    console.log(\"staking...........\", stakeInput);\n  }\n\n  const onClickWithdraw = (e) => {\n    e.preventDefault()\n    console.log(\"unstaking...........\", withdrawInput);\n  }\n  // 0x169E82570feAc981780F3C48Ee9f05CED1328e1b\n  \n  return (\n    <div className=\"App\">\n      <Header \n        connectWallet = {connectWallet}\n        connected={connected}\n        userInfo = {userInfo}\n      />\n      <main className='main'>\n        <MyStake\n          stakeInput = {stakeInput}\n          withdrawInput = {withdrawInput}\n          onChangeInput = {onChangeInput}\n          onClickStake = {onClickStake}\n          onClickWithdraw = {onClickWithdraw}\n          stakeAmount = {stakeAmount}\n          rewardAmount = {rewardAmount}\n\n        />\n        <StakeHistory\n          stakeData = {stateHistory}\n        />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}