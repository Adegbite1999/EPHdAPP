{"ast":null,"code":"var _jsxFileName = \"/home/adegbite/web3-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport { useState, useEffect } from 'react';\nimport Footer from './components/Footer/Footer';\nimport { ethers, utils, Contract } from 'ethers';\nimport { formatDate } from './utils/helpers';\nimport BRTTokenAbi from './utils/web3/abi.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BRTTokenAddress = \"0x169E82570feAc981780F3C48Ee9f05CED1328e1b\";\n\nfunction App() {\n  _s();\n\n  // a flag for keeping track of whether or not a user is connected\n  const [connected, setConnected] = useState(false); // connected user details\n\n  const [userInfo, setUserInfo] = useState({\n    matic_balance: 0,\n    token_balance: 0,\n    address: null\n  }); // the amount of token the user have staked\n\n  const [stakeAmount, setStakeAmount] = useState(null); // the amount of reward the user has accumulate on his stake\n\n  const [rewardAmount, setRewardAmount] = useState(null); // the value of token the user wants to stake\n\n  const [stakeInput, setStakeInput] = useState(\"\");\n  const [addressInput, setAddressInput] = useState(\"\"); // the value of token the user wants to withdraw\n\n  const [withdrawInput, setWithdrawInput] = useState(\"\"); // all stake history data displayed on the history table\n\n  const [stateHistory, setStakeHistory] = useState([]);\n  const [stakeDetails, setStakeDetails] = useState([]); // helper function for getting the matic and token balance, given an address\n\n  const getAccountDetails = async address => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userMaticBal = await provider.getBalance(address);\n      const BRTContractInstance = new Contract(BRTTokenAddress, BRTTokenAbi, provider);\n      const userBRTBalance = await BRTContractInstance.balanceOf(address);\n      await getStake();\n      return {\n        userBRTBalance,\n        userMaticBal\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  }; // handler for when user switch from one account to another or completely disconnected\n\n\n  const handleAccountChanged = async accounts => {\n    if (!!accounts.length) {\n      const networkId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n      if (Number(networkId) !== 80001) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        matic_balance: accountDetails.userMaticBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n    } else {\n      setConnected(false);\n      setUserInfo({\n        matic_balance: 0,\n        token_balance: 0,\n        address: null\n      });\n    }\n  }; // handler for handling chain/network changed\n\n\n  const handleChainChanged = async chainid => {\n    if (Number(chainid) !== 80001) {\n      setConnected(false);\n      setUserInfo({\n        matic_balance: 0,\n        token_balance: 0,\n        address: null\n      });\n      return alert(\"You are connected to the wrong network, please switch to polygon mumbai\");\n    } else {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.listAccounts();\n      if (!accounts.length) return;\n      const accountDetails = await getAccountDetails(accounts[0]);\n      setUserInfo({\n        matic_balance: accountDetails.userMaticBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      });\n      setConnected(true);\n    }\n  }; // an handler to eagerly connect user and fetch their data\n\n\n  const eagerConnect = async () => {\n    const networkId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n    if (Number(networkId) !== 80001) return;\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const accounts = await provider.listAccounts();\n    if (!accounts.length) return;\n    const accountDetails = await getAccountDetails(accounts[0]);\n    setUserInfo({\n      matic_balance: accountDetails.userMaticBal,\n      token_balance: accountDetails.userBRTBalance,\n      address: accounts[0]\n    });\n    setConnected(true);\n  }; // a function for fetching necesary data from the contract and also listening for contract event when the page loads\n\n\n  const init = async () => {\n    const customProvider = new ethers.providers.JsonRpcProvider(process.env.REACT_APP_RPC_URL);\n    const BRTContractInstance = new Contract(BRTTokenAddress, BRTTokenAbi, customProvider);\n    const stakeHistory = await BRTContractInstance.queryFilter(\"stakeEvent\");\n    const history = [];\n    stakeHistory.forEach(data => {\n      history.unshift({\n        amount: data.args[1],\n        account: data.args[0],\n        time: data.args[2].toString(),\n        type: data.args[3]\n      });\n    });\n    setStakeHistory(history);\n    BRTContractInstance.on(\"stakeEvent\", (account, amount, time, type) => {\n      const newStake = {\n        amount: amount,\n        account: account,\n        time: time.toString(),\n        type: type\n      };\n      setStakeHistory(prev => [newStake, ...prev]);\n    });\n  };\n\n  useEffect(() => {\n    init();\n    if (!window.ethereum) return; // binding handlers to wallet events we care about\n\n    window.ethereum.on(\"connect\", eagerConnect);\n    window.ethereum.on(\"accountsChanged\", handleAccountChanged);\n    window.ethereum.on('chainChanged', handleChainChanged);\n  }, []);\n\n  const connectWallet = async () => {\n    if (!!window.ethereum || !!window.web3) {\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n    } else {\n      alert(\"please use an etherum enabled browser\");\n    }\n  }; // onchange handler for handling both stake and unstake input value\n\n\n  const onChangeInput = _ref => {\n    let {\n      target\n    } = _ref;\n\n    switch (target.id) {\n      case \"stake\":\n        setStakeInput(target.value);\n        break;\n\n      case \"unstake\":\n        setWithdrawInput(target.value);\n        break;\n\n      case \"address\":\n        setAddressInput(target.value);\n        break;\n\n      default:\n        break;\n    }\n  }; // A function that handles staking\n\n\n  const onClickStake = async e => {\n    e.preventDefault();\n    if (stakeInput < 0) return alert(\"you cannot stake less than 0 BRT\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const BRTContractInstance = new Contract(BRTTokenAddress, BRTTokenAbi, signer);\n    const weiValue = utils.parseEther(stakeInput);\n    const stakeTx = await BRTContractInstance.stakeBRT(weiValue); // const stakeTxHash = await provider.getTransaction(stakeTx.hash)\n\n    const response = await stakeTx.wait(); // const address = response.events[1].args[0]\n    // const amountStaked = response.events[1].args[1].toString()\n    // const time = response.events[1].args[2].toString()\n    // const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    const accounts = await provider.listAccounts();\n    if (!accounts.length) return;\n    const accountDetails = await getAccountDetails(accounts[0]);\n    setUserInfo({\n      matic_balance: accountDetails.userMaticBal,\n      token_balance: accountDetails.userBRTBalance,\n      address: accounts[0]\n    });\n    setConnected(true);\n    setStakeInput(\"\");\n  };\n\n  const onClickWithdraw = async e => {\n    e.preventDefault();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const BRTContractInstance = new Contract(BRTTokenAddress, BRTTokenAbi, signer);\n    const weiValue = utils.parseEther(withdrawInput);\n    const stakeTx = await BRTContractInstance.withdraw(weiValue); // const stakeTxHash = await provider.getTransaction(stakeTx.hash)\n\n    const response = await stakeTx.wait(); // const address = response.events[1].args[0]\n    // const amountStaked = response.events[1].args[1].toString()\n    // const time = response.events[1].args[2].toString()\n    // const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    const accounts = await provider.listAccounts();\n    if (!accounts.length) return;\n    const accountDetails = await getAccountDetails(accounts[0]);\n    setUserInfo({\n      matic_balance: accountDetails.userMaticBal,\n      token_balance: accountDetails.userBRTBalance,\n      address: accounts[0]\n    });\n    setConnected(true);\n    setWithdrawInput(\"\");\n  };\n\n  const getStake = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const BRTContractInstance = new Contract(BRTTokenAddress, BRTTokenAbi, signer);\n    const myStake = await BRTContractInstance.myStake();\n    const stake = utils.formatUnits(myStake.stakeAmount, 18);\n    setStakeAmount(stake); // getting the last stake in seconds\n\n    const lastestStake = formatDate(myStake.time.toString());\n    const newStakeTime = new Date(lastestStake);\n    const stakeSeconds = Math.floor(newStakeTime.getTime() / 1000); // getting the current day in seconds\n\n    const currentDay = new Date();\n    const currentDaySeconds = Math.floor(currentDay.getTime() / 1000); // getting the difference between the lastest stake and the current day\n\n    const timeDifference = currentDaySeconds - stakeSeconds; // showing reward after 3 days otherwise showing 0\n\n    if (timeDifference >= 259200) {\n      const reward = 0.0000000386 * timeDifference * stake;\n      setRewardAmount(reward.toFixed(3));\n    } else setRewardAmount(\"00.00\");\n  };\n\n  const onClickAddress = async e => {\n    e.preventDefault();\n    const customProvider = new ethers.providers.JsonRpcProvider(process.env.REACT_APP_RPC_URL);\n    const BRTContractInstance = new Contract(BRTTokenAddress, BRTTokenAbi, customProvider);\n    const userDetails = await BRTContractInstance.getStakeByAddress(addressInput); // setStakeDetails(userDetails)\n\n    const history = [];\n    stakeDetails.forEach(data => {\n      history.unshift({\n        amount: data.args[1],\n        account: data.args[0],\n        time: data.args[2].toString(),\n        type: data.args[3]\n      });\n    });\n    setStakeDetails(history);\n    console.log(history); // console.log(stakeDetails)\n\n    setAddressInput(\"\"); // const history = [];\n    // stakeHistory.forEach(data => {\n    //   history.unshift({\n    //     amount: data.args[1],\n    //     account: data.args[0],\n    //     time: data.args[2].toString(),\n    //     type: data.args[3],\n    //   })\n    // })\n    // setStakeHistory(history);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      connectWallet: connectWallet,\n      connected: connected,\n      userInfo: userInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(MyStake, {\n        stakeInput: stakeInput,\n        addressInput: addressInput,\n        withdrawInput: withdrawInput,\n        onChangeInput: onChangeInput,\n        onClickStake: onClickStake,\n        onClickWithdraw: onClickWithdraw,\n        onClickAddress: onClickAddress,\n        stakeAmount: stakeAmount,\n        rewardAmount: rewardAmount,\n        connected: connected,\n        stakeDetails: stakeDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StakeHistory, {\n        stakeData: stateHistory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lXxivKRohtfajpOEOtosBVuzu2c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adegbite/web3-frontend/src/App.js"],"names":["Header","MyStake","StakeHistory","useState","useEffect","Footer","ethers","utils","Contract","formatDate","BRTTokenAbi","BRTTokenAddress","App","connected","setConnected","userInfo","setUserInfo","matic_balance","token_balance","address","stakeAmount","setStakeAmount","rewardAmount","setRewardAmount","stakeInput","setStakeInput","addressInput","setAddressInput","withdrawInput","setWithdrawInput","stateHistory","setStakeHistory","stakeDetails","setStakeDetails","getAccountDetails","provider","providers","Web3Provider","window","ethereum","userMaticBal","getBalance","BRTContractInstance","userBRTBalance","balanceOf","getStake","err","console","log","handleAccountChanged","accounts","length","networkId","request","method","Number","accountDetails","handleChainChanged","chainid","alert","listAccounts","eagerConnect","init","customProvider","JsonRpcProvider","process","env","REACT_APP_RPC_URL","stakeHistory","queryFilter","history","forEach","data","unshift","amount","args","account","time","toString","type","on","newStake","prev","connectWallet","web3","onChangeInput","target","id","value","onClickStake","e","preventDefault","signer","getSigner","weiValue","parseEther","stakeTx","stakeBRT","response","wait","onClickWithdraw","withdraw","myStake","stake","formatUnits","lastestStake","newStakeTime","Date","stakeSeconds","Math","floor","getTime","currentDay","currentDaySeconds","timeDifference","reward","toFixed","onClickAddress","userDetails","getStakeByAddress"],"mappings":"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","sourcesContent":["import './App.css';\nimport Header from './components/header/Header';\nimport MyStake from './components/MyStake/MyStake';\nimport StakeHistory from './components/StakeHistory/StakeHistory';\nimport {useState, useEffect} from 'react'\nimport Footer from './components/Footer/Footer';\nimport { ethers, utils, Contract} from 'ethers';\nimport { formatDate} from './utils/helpers'\nimport BRTTokenAbi from './utils/web3/abi.json'\nconst BRTTokenAddress = \"0x169E82570feAc981780F3C48Ee9f05CED1328e1b\";\n\nfunction App() {\n\n  // a flag for keeping track of whether or not a user is connected\n  const [connected, setConnected] = useState(false);\n\n  // connected user details\n  const [userInfo, setUserInfo] = useState({\n    matic_balance: 0,\n    token_balance: 0,\n    address: null\n  });\n  \n  \n  // the amount of token the user have staked\n  const [stakeAmount, setStakeAmount] = useState(null)\n\n  // the amount of reward the user has accumulate on his stake\n  const [rewardAmount, setRewardAmount] = useState(null)\n\n  // the value of token the user wants to stake\n  const [stakeInput, setStakeInput] = useState(\"\");\n\n  const [addressInput, setAddressInput] = useState(\"\");\n  // the value of token the user wants to withdraw\n  const [withdrawInput, setWithdrawInput] = useState(\"\");\n\n  // all stake history data displayed on the history table\n  const [stateHistory, setStakeHistory] = useState([]);\n\n  const [stakeDetails, setStakeDetails] = useState([])\n\n  // helper function for getting the matic and token balance, given an address\n  const getAccountDetails = async (address) => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userMaticBal = await provider.getBalance(address);\n      const BRTContractInstance = new Contract(BRTTokenAddress, BRTTokenAbi, provider);\n      const userBRTBalance = await BRTContractInstance.balanceOf(address)\n      await getStake()\n      return {userBRTBalance, userMaticBal}\n    }catch(err) {\n      console.log(err)\n    }\n  }\n\n  // handler for when user switch from one account to another or completely disconnected\n  const handleAccountChanged = async (accounts) => {\n    if(!!accounts.length) {\n      const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n      if(Number(networkId) !== 80001) return\n      const accountDetails = await getAccountDetails(accounts[0])\n\n      setUserInfo({\n        matic_balance: accountDetails.userMaticBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      })\n      setConnected(true)\n    }else {\n      setConnected(false)\n      setUserInfo({\n        matic_balance: 0,\n        token_balance: 0,\n        address: null\n      })\n      \n    }\n  }\n\n  // handler for handling chain/network changed\n  const handleChainChanged = async (chainid) => {\n    if(Number(chainid) !== 80001) {\n      setConnected(false)\n      setUserInfo({\n        matic_balance: 0,\n        token_balance: 0,\n        address: null\n      })\n      \n      return alert(\"You are connected to the wrong network, please switch to polygon mumbai\")\n    }else {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const accounts = await provider.listAccounts();\n      if(!accounts.length) return\n      const accountDetails = await getAccountDetails(accounts[0])\n        setUserInfo({\n          matic_balance: accountDetails.userMaticBal,\n          token_balance: accountDetails.userBRTBalance,\n          address: accounts[0]\n        })\n        setConnected(true)\n      }\n  }\n\n  // an handler to eagerly connect user and fetch their data\n  const eagerConnect = async () => {\n    const networkId = await window.ethereum.request({method: \"eth_chainId\"})\n    if(Number(networkId) !== 80001) return\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const accounts = await provider.listAccounts();\n    if(!accounts.length) return\n    const accountDetails = await getAccountDetails(accounts[0])\n      setUserInfo({\n        matic_balance: accountDetails.userMaticBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      })\n      setConnected(true)\n  }\n\n  // a function for fetching necesary data from the contract and also listening for contract event when the page loads\n  const init = async () => {\n    const customProvider = new ethers.providers.JsonRpcProvider(process.env.REACT_APP_RPC_URL)\n    const BRTContractInstance = new Contract(BRTTokenAddress, BRTTokenAbi, customProvider);\n    const stakeHistory = await BRTContractInstance.queryFilter(\"stakeEvent\");\n\n    const history = [];\n\n    \n    stakeHistory.forEach(data => {\n      history.unshift({\n        amount: data.args[1],\n        account: data.args[0],\n        time: data.args[2].toString(),\n        type: data.args[3],\n      })\n    })\n\n\n    setStakeHistory(history);\n\n    BRTContractInstance.on(\"stakeEvent\", (account, amount, time, type) => {\n      const newStake = {\n        amount: amount,\n        account: account,\n        time: time.toString(),\n        type: type,\n      }\n\n      setStakeHistory(prev => [newStake, ...prev]);\n    })\n\n  }\n\n  useEffect(() => {\n\n    init()\n    if(!window.ethereum) return;\n    // binding handlers to wallet events we care about\n    window.ethereum.on(\"connect\", eagerConnect)\n    window.ethereum.on(\"accountsChanged\", handleAccountChanged)\n    window.ethereum.on('chainChanged', handleChainChanged);\n  }, [])\n  \n\n  const connectWallet = async () => {\n    if(!!window.ethereum || !!window.web3) {\n      await window.ethereum.request({method: \"eth_requestAccounts\"})\n    } else {\n      alert(\"please use an etherum enabled browser\");\n    }\n  }\n\n  // onchange handler for handling both stake and unstake input value\n  const onChangeInput = ({target}) => {\n    switch (target.id) {\n      case \"stake\":\n        setStakeInput(target.value)\n        break;\n\n      case \"unstake\":\n        setWithdrawInput(target.value);\n        break;\n\n        case \"address\":\n        setAddressInput(target.value);\n        break;\n    \n      default:\n        break;\n    }\n  }\n\n  // A function that handles staking\n  const onClickStake = async (e) => {\n    e.preventDefault()\n    if(stakeInput < 0) return alert(\"you cannot stake less than 0 BRT\")\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const BRTContractInstance = new Contract(BRTTokenAddress, BRTTokenAbi, signer);\n    const weiValue = utils.parseEther(stakeInput);\n    const stakeTx = await BRTContractInstance.stakeBRT(weiValue);\n\n    // const stakeTxHash = await provider.getTransaction(stakeTx.hash)\n    const response = await stakeTx.wait();\n\n    // const address = response.events[1].args[0]\n    // const amountStaked = response.events[1].args[1].toString()\n    // const time = response.events[1].args[2].toString()\n    // const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const accounts = await provider.listAccounts();\n    if(!accounts.length) return\n    const accountDetails = await getAccountDetails(accounts[0])\n      setUserInfo({\n        matic_balance: accountDetails.userMaticBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      })\n      setConnected(true)\n      setStakeInput(\"\")\n    \n  }\n\n\n\n\n  const onClickWithdraw = async(e) => {\n \n    e.preventDefault()\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const BRTContractInstance = new Contract(BRTTokenAddress, BRTTokenAbi, signer);\n    const weiValue = utils.parseEther(withdrawInput);\n    const stakeTx = await BRTContractInstance.withdraw(weiValue);\n\n    // const stakeTxHash = await provider.getTransaction(stakeTx.hash)\n    const response = await stakeTx.wait();\n\n    // const address = response.events[1].args[0]\n    // const amountStaked = response.events[1].args[1].toString()\n    // const time = response.events[1].args[2].toString()\n    // const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const accounts = await provider.listAccounts();\n    if(!accounts.length) return\n    const accountDetails = await getAccountDetails(accounts[0])\n      setUserInfo({\n        matic_balance: accountDetails.userMaticBal,\n        token_balance: accountDetails.userBRTBalance,\n        address: accounts[0]\n      })\n      setConnected(true)\n      setWithdrawInput(\"\")\n    \n  }\n\n\n\n  const getStake = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const BRTContractInstance = new Contract(\n      BRTTokenAddress,\n      BRTTokenAbi,\n      signer\n    );\n    const myStake = await BRTContractInstance.myStake();\n    const stake = utils.formatUnits(myStake.stakeAmount, 18);\n    setStakeAmount(stake);\n\n    // getting the last stake in seconds\n    const lastestStake = formatDate(myStake.time.toString());\n    const newStakeTime = new Date(lastestStake);\n    const stakeSeconds = Math.floor(newStakeTime.getTime() / 1000);\n\n    // getting the current day in seconds\n    const currentDay = new Date();\n    const currentDaySeconds = Math.floor(currentDay.getTime() / 1000);\n\n    // getting the difference between the lastest stake and the current day\n    const timeDifference = currentDaySeconds - stakeSeconds;\n\n    // showing reward after 3 days otherwise showing 0\n    if (timeDifference >= 259200) {\n      const reward = 0.0000000386 * timeDifference * stake;\n      setRewardAmount(reward.toFixed(3));\n    } else setRewardAmount(\"00.00\");\n  };\n\n  const onClickAddress = async(e) =>{\n    e.preventDefault()\n    const customProvider = new ethers.providers.JsonRpcProvider(\n      process.env.REACT_APP_RPC_URL\n    );\n    const BRTContractInstance = new Contract(\n      BRTTokenAddress,\n      BRTTokenAbi,\n      customProvider\n    );\n    const userDetails = await BRTContractInstance.getStakeByAddress(\n      addressInput\n    );\n    // setStakeDetails(userDetails)\n\n    const history = [];\n\n    \n    stakeDetails.forEach(data => {\n      history.unshift({\n        amount: data.args[1],\n        account: data.args[0],\n        time: data.args[2].toString(),\n        type: data.args[3],\n      })\n    })\n\n\n    setStakeDetails(history)\n    console.log(history)\n    // console.log(stakeDetails)\n    setAddressInput(\"\")\n      \n\n    // const history = [];\n    \n    // stakeHistory.forEach(data => {\n    //   history.unshift({\n    //     amount: data.args[1],\n    //     account: data.args[0],\n    //     time: data.args[2].toString(),\n    //     type: data.args[3],\n    //   })\n    // })\n\n\n    // setStakeHistory(history);\n  }\n  \n  return (\n    <div className=\"App\">\n      <Header \n        connectWallet = {connectWallet}\n        connected={connected}\n        userInfo = {userInfo}\n      />\n      <main className='main'>\n        <MyStake\n          stakeInput = {stakeInput}\n          addressInput={addressInput}\n          withdrawInput = {withdrawInput}\n          onChangeInput = {onChangeInput}\n          onClickStake = {onClickStake}\n          onClickWithdraw = {onClickWithdraw}\n          onClickAddress={onClickAddress}\n          stakeAmount = {stakeAmount}\n          rewardAmount = {rewardAmount}\n          connected = {connected}\n          stakeDetails={stakeDetails}\n\n        />\n        <StakeHistory\n          stakeData = {stateHistory}\n        />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}